
uart3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004898  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c18  08004c18  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c18  08004c18  00014c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c20  08004c20  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08004c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000022c  08004e54  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08004e54  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011318  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214b  00000000  00000000  00031574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  000336c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00034618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b5f  00000000  00000000  000354f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001044d  00000000  00000000  0005c04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f321a  00000000  00000000  0006c49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015f6b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ec  00000000  00000000  0015f70c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000022c 	.word	0x2000022c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a08 	.word	0x08004a08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000230 	.word	0x20000230
 80001c4:	08004a08 	.word	0x08004a08

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b96e 	b.w	80004d0 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	468c      	mov	ip, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	f040 8083 	bne.w	8000322 <__udivmoddi4+0x116>
 800021c:	428a      	cmp	r2, r1
 800021e:	4617      	mov	r7, r2
 8000220:	d947      	bls.n	80002b2 <__udivmoddi4+0xa6>
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	b142      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000228:	f1c2 0020 	rsb	r0, r2, #32
 800022c:	fa24 f000 	lsr.w	r0, r4, r0
 8000230:	4091      	lsls	r1, r2
 8000232:	4097      	lsls	r7, r2
 8000234:	ea40 0c01 	orr.w	ip, r0, r1
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbbc f6f8 	udiv	r6, ip, r8
 8000244:	fa1f fe87 	uxth.w	lr, r7
 8000248:	fb08 c116 	mls	r1, r8, r6, ip
 800024c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000250:	fb06 f10e 	mul.w	r1, r6, lr
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 8119 	bcs.w	8000494 <__udivmoddi4+0x288>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8116 	bls.w	8000494 <__udivmoddi4+0x288>
 8000268:	3e02      	subs	r6, #2
 800026a:	443b      	add	r3, r7
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000280:	45a6      	cmp	lr, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	193c      	adds	r4, r7, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8105 	bcs.w	8000498 <__udivmoddi4+0x28c>
 800028e:	45a6      	cmp	lr, r4
 8000290:	f240 8102 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029c:	eba4 040e 	sub.w	r4, r4, lr
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	b902      	cbnz	r2, 80002b6 <__udivmoddi4+0xaa>
 80002b4:	deff      	udf	#255	; 0xff
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d150      	bne.n	8000360 <__udivmoddi4+0x154>
 80002be:	1bcb      	subs	r3, r1, r7
 80002c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c4:	fa1f f887 	uxth.w	r8, r7
 80002c8:	2601      	movs	r6, #1
 80002ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ce:	0c21      	lsrs	r1, r4, #16
 80002d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d8:	fb08 f30c 	mul.w	r3, r8, ip
 80002dc:	428b      	cmp	r3, r1
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0xe4>
 80002e0:	1879      	adds	r1, r7, r1
 80002e2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0xe2>
 80002e8:	428b      	cmp	r3, r1
 80002ea:	f200 80e9 	bhi.w	80004c0 <__udivmoddi4+0x2b4>
 80002ee:	4684      	mov	ip, r0
 80002f0:	1ac9      	subs	r1, r1, r3
 80002f2:	b2a3      	uxth	r3, r4
 80002f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000300:	fb08 f800 	mul.w	r8, r8, r0
 8000304:	45a0      	cmp	r8, r4
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0x10c>
 8000308:	193c      	adds	r4, r7, r4
 800030a:	f100 33ff 	add.w	r3, r0, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x10a>
 8000310:	45a0      	cmp	r8, r4
 8000312:	f200 80d9 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 8000316:	4618      	mov	r0, r3
 8000318:	eba4 0408 	sub.w	r4, r4, r8
 800031c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000320:	e7bf      	b.n	80002a2 <__udivmoddi4+0x96>
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0x12e>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80b1 	beq.w	800048e <__udivmoddi4+0x282>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x1cc>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0x140>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80b8 	bhi.w	80004bc <__udivmoddi4+0x2b0>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0103 	sbc.w	r1, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	468c      	mov	ip, r1
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0a8      	beq.n	80002ac <__udivmoddi4+0xa0>
 800035a:	e9c5 4c00 	strd	r4, ip, [r5]
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0xa0>
 8000360:	f1c2 0320 	rsb	r3, r2, #32
 8000364:	fa20 f603 	lsr.w	r6, r0, r3
 8000368:	4097      	lsls	r7, r2
 800036a:	fa01 f002 	lsl.w	r0, r1, r2
 800036e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000372:	40d9      	lsrs	r1, r3
 8000374:	4330      	orrs	r0, r6
 8000376:	0c03      	lsrs	r3, r0, #16
 8000378:	fbb1 f6fe 	udiv	r6, r1, lr
 800037c:	fa1f f887 	uxth.w	r8, r7
 8000380:	fb0e 1116 	mls	r1, lr, r6, r1
 8000384:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000388:	fb06 f108 	mul.w	r1, r6, r8
 800038c:	4299      	cmp	r1, r3
 800038e:	fa04 f402 	lsl.w	r4, r4, r2
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x19c>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f106 3cff 	add.w	ip, r6, #4294967295
 800039a:	f080 808d 	bcs.w	80004b8 <__udivmoddi4+0x2ac>
 800039e:	4299      	cmp	r1, r3
 80003a0:	f240 808a 	bls.w	80004b8 <__udivmoddi4+0x2ac>
 80003a4:	3e02      	subs	r6, #2
 80003a6:	443b      	add	r3, r7
 80003a8:	1a5b      	subs	r3, r3, r1
 80003aa:	b281      	uxth	r1, r0
 80003ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b8:	fb00 f308 	mul.w	r3, r0, r8
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x1c4>
 80003c0:	1879      	adds	r1, r7, r1
 80003c2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c6:	d273      	bcs.n	80004b0 <__udivmoddi4+0x2a4>
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d971      	bls.n	80004b0 <__udivmoddi4+0x2a4>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4439      	add	r1, r7
 80003d0:	1acb      	subs	r3, r1, r3
 80003d2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d6:	e778      	b.n	80002ca <__udivmoddi4+0xbe>
 80003d8:	f1c6 0c20 	rsb	ip, r6, #32
 80003dc:	fa03 f406 	lsl.w	r4, r3, r6
 80003e0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e4:	431c      	orrs	r4, r3
 80003e6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f6:	431f      	orrs	r7, r3
 80003f8:	0c3b      	lsrs	r3, r7, #16
 80003fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fe:	fa1f f884 	uxth.w	r8, r4
 8000402:	fb0e 1119 	mls	r1, lr, r9, r1
 8000406:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040a:	fb09 fa08 	mul.w	sl, r9, r8
 800040e:	458a      	cmp	sl, r1
 8000410:	fa02 f206 	lsl.w	r2, r2, r6
 8000414:	fa00 f306 	lsl.w	r3, r0, r6
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x220>
 800041a:	1861      	adds	r1, r4, r1
 800041c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000420:	d248      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000422:	458a      	cmp	sl, r1
 8000424:	d946      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 8000426:	f1a9 0902 	sub.w	r9, r9, #2
 800042a:	4421      	add	r1, r4
 800042c:	eba1 010a 	sub.w	r1, r1, sl
 8000430:	b2bf      	uxth	r7, r7
 8000432:	fbb1 f0fe 	udiv	r0, r1, lr
 8000436:	fb0e 1110 	mls	r1, lr, r0, r1
 800043a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043e:	fb00 f808 	mul.w	r8, r0, r8
 8000442:	45b8      	cmp	r8, r7
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x24a>
 8000446:	19e7      	adds	r7, r4, r7
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d22e      	bcs.n	80004ac <__udivmoddi4+0x2a0>
 800044e:	45b8      	cmp	r8, r7
 8000450:	d92c      	bls.n	80004ac <__udivmoddi4+0x2a0>
 8000452:	3802      	subs	r0, #2
 8000454:	4427      	add	r7, r4
 8000456:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045a:	eba7 0708 	sub.w	r7, r7, r8
 800045e:	fba0 8902 	umull	r8, r9, r0, r2
 8000462:	454f      	cmp	r7, r9
 8000464:	46c6      	mov	lr, r8
 8000466:	4649      	mov	r1, r9
 8000468:	d31a      	bcc.n	80004a0 <__udivmoddi4+0x294>
 800046a:	d017      	beq.n	800049c <__udivmoddi4+0x290>
 800046c:	b15d      	cbz	r5, 8000486 <__udivmoddi4+0x27a>
 800046e:	ebb3 020e 	subs.w	r2, r3, lr
 8000472:	eb67 0701 	sbc.w	r7, r7, r1
 8000476:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047a:	40f2      	lsrs	r2, r6
 800047c:	ea4c 0202 	orr.w	r2, ip, r2
 8000480:	40f7      	lsrs	r7, r6
 8000482:	e9c5 2700 	strd	r2, r7, [r5]
 8000486:	2600      	movs	r6, #0
 8000488:	4631      	mov	r1, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e70b      	b.n	80002ac <__udivmoddi4+0xa0>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e9      	b.n	800026c <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fd      	b.n	8000298 <__udivmoddi4+0x8c>
 800049c:	4543      	cmp	r3, r8
 800049e:	d2e5      	bcs.n	800046c <__udivmoddi4+0x260>
 80004a0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a4:	eb69 0104 	sbc.w	r1, r9, r4
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7df      	b.n	800046c <__udivmoddi4+0x260>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e7d2      	b.n	8000456 <__udivmoddi4+0x24a>
 80004b0:	4660      	mov	r0, ip
 80004b2:	e78d      	b.n	80003d0 <__udivmoddi4+0x1c4>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e7b9      	b.n	800042c <__udivmoddi4+0x220>
 80004b8:	4666      	mov	r6, ip
 80004ba:	e775      	b.n	80003a8 <__udivmoddi4+0x19c>
 80004bc:	4630      	mov	r0, r6
 80004be:	e74a      	b.n	8000356 <__udivmoddi4+0x14a>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	4439      	add	r1, r7
 80004c6:	e713      	b.n	80002f0 <__udivmoddi4+0xe4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	443c      	add	r4, r7
 80004cc:	e724      	b.n	8000318 <__udivmoddi4+0x10c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fd22 	bl	8000f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f826 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f910 	bl	8000704 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e4:	f000 f8f0 	bl	80006c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8be 	bl	8000668 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80004ec:	f000 f894 	bl	8000618 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2,START_MESSAGE, sizeof(START_MESSAGE),100);
 80004f0:	2364      	movs	r3, #100	; 0x64
 80004f2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80004f6:	4909      	ldr	r1, [pc, #36]	; (800051c <main+0x48>)
 80004f8:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0x4c>)
 80004fa:	f003 f8b1 	bl	8003660 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE), 100);
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	2208      	movs	r2, #8
 8000502:	4908      	ldr	r1, [pc, #32]	; (8000524 <main+0x50>)
 8000504:	4806      	ldr	r0, [pc, #24]	; (8000520 <main+0x4c>)
 8000506:	f003 f8ab 	bl	8003660 <HAL_UART_Transmit>
  Clear_Buffer();
 800050a:	f000 f92b 	bl	8000764 <Clear_Buffer>

//  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, rx_buff_size);
 // __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
  HAL_UART_Receive_IT(&huart2, &received, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	4905      	ldr	r1, [pc, #20]	; (8000528 <main+0x54>)
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <main+0x4c>)
 8000514:	f003 f938 	bl	8003788 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x44>
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	200002c8 	.word	0x200002c8
 8000524:	20000160 	.word	0x20000160
 8000528:	20000398 	.word	0x20000398

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b0b8      	sub	sp, #224	; 0xe0
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000536:	2244      	movs	r2, #68	; 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 f98c 	bl	8004858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2288      	movs	r2, #136	; 0x88
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f004 f97e 	bl	8004858 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000566:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000582:	230a      	movs	r3, #10
 8000584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000588:	2307      	movs	r3, #7
 800058a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fa72 	bl	8001a88 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005aa:	f000 fb4d 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fe3e 	bl	8002254 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005de:	f000 fb33 	bl	8000c48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 f837 	bl	8002660 <HAL_RCCEx_PeriphCLKConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005f8:	f000 fb26 	bl	8000c48 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000600:	f001 f9ec 	bl	80019dc <HAL_PWREx_ControlVoltageScaling>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800060a:	f000 fb1d 	bl	8000c48 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	37e0      	adds	r7, #224	; 0xe0
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_TIM16_Init+0x48>)
 800061e:	4a11      	ldr	r2, [pc, #68]	; (8000664 <MX_TIM16_Init+0x4c>)
 8000620:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_TIM16_Init+0x48>)
 8000624:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000628:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_TIM16_Init+0x48>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_TIM16_Init+0x48>)
 8000632:	f242 720f 	movw	r2, #9999	; 0x270f
 8000636:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_TIM16_Init+0x48>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_TIM16_Init+0x48>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_TIM16_Init+0x48>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_TIM16_Init+0x48>)
 800064c:	f002 fcc4 	bl	8002fd8 <HAL_TIM_Base_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000656:	f000 faf7 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000034c 	.word	0x2000034c
 8000664:	40014400 	.word	0x40014400

08000668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <MX_USART2_UART_Init+0x5c>)
 8000670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 80006ac:	f002 ff8a 	bl	80035c4 <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006b6:	f000 fac7 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200002c8 	.word	0x200002c8
 80006c4:	40004400 	.word	0x40004400

080006c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_DMA_Init+0x38>)
 80006d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <MX_DMA_Init+0x38>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6493      	str	r3, [r2, #72]	; 0x48
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_DMA_Init+0x38>)
 80006dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2010      	movs	r0, #16
 80006ec:	f000 fd6f 	bl	80011ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006f0:	2010      	movs	r0, #16
 80006f2:	f000 fd88 	bl	8001206 <HAL_NVIC_EnableIRQ>

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_GPIO_Init+0x5c>)
 800071a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071c:	4a10      	ldr	r2, [pc, #64]	; (8000760 <MX_GPIO_Init+0x5c>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_GPIO_Init+0x5c>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2120      	movs	r1, #32
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f001 f910 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800073c:	2320      	movs	r3, #32
 800073e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f000 ff58 	bl	8001608 <HAL_GPIO_Init>

}
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000

08000764 <Clear_Buffer>:

/* USER CODE BEGIN 4 */

void Clear_Buffer()
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	memset(buffer, '\0', BUFFER_SIZE*sizeof(uint8_t));
 8000768:	220a      	movs	r2, #10
 800076a:	2100      	movs	r1, #0
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <Clear_Buffer+0x14>)
 800076e:	f004 f873 	bl	8004858 <memset>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000029c 	.word	0x2000029c

0800077c <Update_Time>:

void Update_Time(Time* time)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	time->second++;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	789b      	ldrb	r3, [r3, #2]
 8000788:	3301      	adds	r3, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	709a      	strb	r2, [r3, #2]
	if((time->second)>59)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	789b      	ldrb	r3, [r3, #2]
 8000794:	2b3b      	cmp	r3, #59	; 0x3b
 8000796:	d91c      	bls.n	80007d2 <Update_Time+0x56>
	{
		time->second=0;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	709a      	strb	r2, [r3, #2]
		time->minute++;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	785b      	ldrb	r3, [r3, #1]
 80007a2:	3301      	adds	r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	705a      	strb	r2, [r3, #1]
		if(time->minute>59)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	785b      	ldrb	r3, [r3, #1]
 80007ae:	2b3b      	cmp	r3, #59	; 0x3b
 80007b0:	d90f      	bls.n	80007d2 <Update_Time+0x56>
			{
				time->minute=0;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	705a      	strb	r2, [r3, #1]
				time->hour++;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	701a      	strb	r2, [r3, #0]
				if(time->hour>23)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b17      	cmp	r3, #23
 80007ca:	d902      	bls.n	80007d2 <Update_Time+0x56>
				{
					time->hour=0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
				}

			}
	}

}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <TimetoString>:

void TimetoString(Time *time,TimeStr*time_str)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	6039      	str	r1, [r7, #0]
	itoa(time->hour,time_str->hour,10);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	220a      	movs	r2, #10
 80007f2:	4619      	mov	r1, r3
 80007f4:	f004 f82e 	bl	8004854 <itoa>
	itoa(time->minute,time_str->minute,10);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	4618      	mov	r0, r3
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	330a      	adds	r3, #10
 8000802:	220a      	movs	r2, #10
 8000804:	4619      	mov	r1, r3
 8000806:	f004 f825 	bl	8004854 <itoa>
	itoa(time->second,time_str->second,10);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	4618      	mov	r0, r3
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	3314      	adds	r3, #20
 8000814:	220a      	movs	r2, #10
 8000816:	4619      	mov	r1, r3
 8000818:	f004 f81c 	bl	8004854 <itoa>

}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <Print_Time>:

void Print_Time(TimeStr *time_str)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, "time: ",6,100);
 800082c:	2364      	movs	r3, #100	; 0x64
 800082e:	2206      	movs	r2, #6
 8000830:	4917      	ldr	r1, [pc, #92]	; (8000890 <Print_Time+0x6c>)
 8000832:	4818      	ldr	r0, [pc, #96]	; (8000894 <Print_Time+0x70>)
 8000834:	f002 ff14 	bl	8003660 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, time_str->hour,2,100);
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	2202      	movs	r2, #2
 800083e:	4815      	ldr	r0, [pc, #84]	; (8000894 <Print_Time+0x70>)
 8000840:	f002 ff0e 	bl	8003660 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, ":",1,100);
 8000844:	2364      	movs	r3, #100	; 0x64
 8000846:	2201      	movs	r2, #1
 8000848:	4913      	ldr	r1, [pc, #76]	; (8000898 <Print_Time+0x74>)
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <Print_Time+0x70>)
 800084c:	f002 ff08 	bl	8003660 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, time_str->minute,2,100);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f103 010a 	add.w	r1, r3, #10
 8000856:	2364      	movs	r3, #100	; 0x64
 8000858:	2202      	movs	r2, #2
 800085a:	480e      	ldr	r0, [pc, #56]	; (8000894 <Print_Time+0x70>)
 800085c:	f002 ff00 	bl	8003660 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, ":",1,100);
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	2201      	movs	r2, #1
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <Print_Time+0x74>)
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <Print_Time+0x70>)
 8000868:	f002 fefa 	bl	8003660 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, time_str->second,2,100);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f103 0114 	add.w	r1, r3, #20
 8000872:	2364      	movs	r3, #100	; 0x64
 8000874:	2202      	movs	r2, #2
 8000876:	4807      	ldr	r0, [pc, #28]	; (8000894 <Print_Time+0x70>)
 8000878:	f002 fef2 	bl	8003660 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE), 100);
 800087c:	2364      	movs	r3, #100	; 0x64
 800087e:	2208      	movs	r2, #8
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <Print_Time+0x78>)
 8000882:	4804      	ldr	r0, [pc, #16]	; (8000894 <Print_Time+0x70>)
 8000884:	f002 feec 	bl	8003660 <HAL_UART_Transmit>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	08004a20 	.word	0x08004a20
 8000894:	200002c8 	.word	0x200002c8
 8000898:	08004a28 	.word	0x08004a28
 800089c:	20000160 	.word	0x20000160

080008a0 <StringtoTime>:

void StringtoTime(Time *time,TimeStr*time_str)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	time->hour=atoi(time_str->hour);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f003 ff8b 	bl	80047c8 <atoi>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	701a      	strb	r2, [r3, #0]
	time->minute=atoi(time_str->minute);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	330a      	adds	r3, #10
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 ff82 	bl	80047c8 <atoi>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	705a      	strb	r2, [r3, #1]
	time->second=atoi(time_str->second);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	3314      	adds	r3, #20
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 ff79 	bl	80047c8 <atoi>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	709a      	strb	r2, [r3, #2]
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <Handle_Commands>:

void Handle_Commands()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
	if(!strcmp(buffer,on_command))
 80008ee:	4955      	ldr	r1, [pc, #340]	; (8000a44 <Handle_Commands+0x15c>)
 80008f0:	4855      	ldr	r0, [pc, #340]	; (8000a48 <Handle_Commands+0x160>)
 80008f2:	f7ff fc69 	bl	80001c8 <strcmp>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d112      	bne.n	8000922 <Handle_Commands+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2120      	movs	r1, #32
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f001 f82a 	bl	800195c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, "LED turned on", 13,100);
 8000908:	2364      	movs	r3, #100	; 0x64
 800090a:	220d      	movs	r2, #13
 800090c:	494f      	ldr	r1, [pc, #316]	; (8000a4c <Handle_Commands+0x164>)
 800090e:	4850      	ldr	r0, [pc, #320]	; (8000a50 <Handle_Commands+0x168>)
 8000910:	f002 fea6 	bl	8003660 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE),100);
 8000914:	2364      	movs	r3, #100	; 0x64
 8000916:	2208      	movs	r2, #8
 8000918:	494e      	ldr	r1, [pc, #312]	; (8000a54 <Handle_Commands+0x16c>)
 800091a:	484d      	ldr	r0, [pc, #308]	; (8000a50 <Handle_Commands+0x168>)
 800091c:	f002 fea0 	bl	8003660 <HAL_UART_Transmit>
	else
	{
		HAL_UART_Transmit(&huart2, "Unknown Command", 15,100);
		HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE), 100);
	}
}
 8000920:	e08b      	b.n	8000a3a <Handle_Commands+0x152>
	else if(!strcmp(buffer,off_command))
 8000922:	494d      	ldr	r1, [pc, #308]	; (8000a58 <Handle_Commands+0x170>)
 8000924:	4848      	ldr	r0, [pc, #288]	; (8000a48 <Handle_Commands+0x160>)
 8000926:	f7ff fc4f 	bl	80001c8 <strcmp>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d112      	bne.n	8000956 <Handle_Commands+0x6e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2120      	movs	r1, #32
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f001 f810 	bl	800195c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, "LED turned off ", 14,100);
 800093c:	2364      	movs	r3, #100	; 0x64
 800093e:	220e      	movs	r2, #14
 8000940:	4946      	ldr	r1, [pc, #280]	; (8000a5c <Handle_Commands+0x174>)
 8000942:	4843      	ldr	r0, [pc, #268]	; (8000a50 <Handle_Commands+0x168>)
 8000944:	f002 fe8c 	bl	8003660 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE), 100);
 8000948:	2364      	movs	r3, #100	; 0x64
 800094a:	2208      	movs	r2, #8
 800094c:	4941      	ldr	r1, [pc, #260]	; (8000a54 <Handle_Commands+0x16c>)
 800094e:	4840      	ldr	r0, [pc, #256]	; (8000a50 <Handle_Commands+0x168>)
 8000950:	f002 fe86 	bl	8003660 <HAL_UART_Transmit>
}
 8000954:	e071      	b.n	8000a3a <Handle_Commands+0x152>
	else if(!strcmp(buffer,toggle_command))
 8000956:	4942      	ldr	r1, [pc, #264]	; (8000a60 <Handle_Commands+0x178>)
 8000958:	483b      	ldr	r0, [pc, #236]	; (8000a48 <Handle_Commands+0x160>)
 800095a:	f7ff fc35 	bl	80001c8 <strcmp>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d111      	bne.n	8000988 <Handle_Commands+0xa0>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000964:	2120      	movs	r1, #32
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f001 f80f 	bl	800198c <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart2, "LED Toggled ", 12,100);
 800096e:	2364      	movs	r3, #100	; 0x64
 8000970:	220c      	movs	r2, #12
 8000972:	493c      	ldr	r1, [pc, #240]	; (8000a64 <Handle_Commands+0x17c>)
 8000974:	4836      	ldr	r0, [pc, #216]	; (8000a50 <Handle_Commands+0x168>)
 8000976:	f002 fe73 	bl	8003660 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE), 100);
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	2208      	movs	r2, #8
 800097e:	4935      	ldr	r1, [pc, #212]	; (8000a54 <Handle_Commands+0x16c>)
 8000980:	4833      	ldr	r0, [pc, #204]	; (8000a50 <Handle_Commands+0x168>)
 8000982:	f002 fe6d 	bl	8003660 <HAL_UART_Transmit>
}
 8000986:	e058      	b.n	8000a3a <Handle_Commands+0x152>
	else if(!strcmp(buffer,help_command))
 8000988:	4937      	ldr	r1, [pc, #220]	; (8000a68 <Handle_Commands+0x180>)
 800098a:	482f      	ldr	r0, [pc, #188]	; (8000a48 <Handle_Commands+0x160>)
 800098c:	f7ff fc1c 	bl	80001c8 <strcmp>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d10d      	bne.n	80009b2 <Handle_Commands+0xca>
		HAL_UART_Transmit(&huart2, START_MESSAGE, sizeof(START_MESSAGE),100);
 8000996:	2364      	movs	r3, #100	; 0x64
 8000998:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800099c:	4933      	ldr	r1, [pc, #204]	; (8000a6c <Handle_Commands+0x184>)
 800099e:	482c      	ldr	r0, [pc, #176]	; (8000a50 <Handle_Commands+0x168>)
 80009a0:	f002 fe5e 	bl	8003660 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE), 100);
 80009a4:	2364      	movs	r3, #100	; 0x64
 80009a6:	2208      	movs	r2, #8
 80009a8:	492a      	ldr	r1, [pc, #168]	; (8000a54 <Handle_Commands+0x16c>)
 80009aa:	4829      	ldr	r0, [pc, #164]	; (8000a50 <Handle_Commands+0x168>)
 80009ac:	f002 fe58 	bl	8003660 <HAL_UART_Transmit>
}
 80009b0:	e043      	b.n	8000a3a <Handle_Commands+0x152>
	else if(!strcmp(buffer,start_command))
 80009b2:	492f      	ldr	r1, [pc, #188]	; (8000a70 <Handle_Commands+0x188>)
 80009b4:	4824      	ldr	r0, [pc, #144]	; (8000a48 <Handle_Commands+0x160>)
 80009b6:	f7ff fc07 	bl	80001c8 <strcmp>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d10c      	bne.n	80009da <Handle_Commands+0xf2>
		HAL_TIM_Base_Start_IT(&htim16);
 80009c0:	482c      	ldr	r0, [pc, #176]	; (8000a74 <Handle_Commands+0x18c>)
 80009c2:	f002 fb61 	bl	8003088 <HAL_TIM_Base_Start_IT>
		TimetoString(&time, &time_str);
 80009c6:	492c      	ldr	r1, [pc, #176]	; (8000a78 <Handle_Commands+0x190>)
 80009c8:	482c      	ldr	r0, [pc, #176]	; (8000a7c <Handle_Commands+0x194>)
 80009ca:	f7ff ff08 	bl	80007de <TimetoString>
		Print_Time(&time_str);
 80009ce:	482a      	ldr	r0, [pc, #168]	; (8000a78 <Handle_Commands+0x190>)
 80009d0:	f7ff ff28 	bl	8000824 <Print_Time>
		uint8_t interval_var=0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	71bb      	strb	r3, [r7, #6]
}
 80009d8:	e02f      	b.n	8000a3a <Handle_Commands+0x152>
	else if(!strcmp(buffer,stop_command))
 80009da:	4929      	ldr	r1, [pc, #164]	; (8000a80 <Handle_Commands+0x198>)
 80009dc:	481a      	ldr	r0, [pc, #104]	; (8000a48 <Handle_Commands+0x160>)
 80009de:	f7ff fbf3 	bl	80001c8 <strcmp>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d105      	bne.n	80009f4 <Handle_Commands+0x10c>
		HAL_TIM_Base_Stop_IT(&htim16);
 80009e8:	4822      	ldr	r0, [pc, #136]	; (8000a74 <Handle_Commands+0x18c>)
 80009ea:	f002 fbbd 	bl	8003168 <HAL_TIM_Base_Stop_IT>
		uint8_t interval_var=0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	71fb      	strb	r3, [r7, #7]
}
 80009f2:	e022      	b.n	8000a3a <Handle_Commands+0x152>
	else if(!strcmp(buffer,time_command))
 80009f4:	4923      	ldr	r1, [pc, #140]	; (8000a84 <Handle_Commands+0x19c>)
 80009f6:	4814      	ldr	r0, [pc, #80]	; (8000a48 <Handle_Commands+0x160>)
 80009f8:	f7ff fbe6 	bl	80001c8 <strcmp>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10f      	bne.n	8000a22 <Handle_Commands+0x13a>
		HAL_UART_Transmit(&huart2, "Enter time in format <hh:mm:ss>; :",33,100);
 8000a02:	2364      	movs	r3, #100	; 0x64
 8000a04:	2221      	movs	r2, #33	; 0x21
 8000a06:	4920      	ldr	r1, [pc, #128]	; (8000a88 <Handle_Commands+0x1a0>)
 8000a08:	4811      	ldr	r0, [pc, #68]	; (8000a50 <Handle_Commands+0x168>)
 8000a0a:	f002 fe29 	bl	8003660 <HAL_UART_Transmit>
		set_timeON=1;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <Handle_Commands+0x1a4>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE), 100);
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	2208      	movs	r2, #8
 8000a18:	490e      	ldr	r1, [pc, #56]	; (8000a54 <Handle_Commands+0x16c>)
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <Handle_Commands+0x168>)
 8000a1c:	f002 fe20 	bl	8003660 <HAL_UART_Transmit>
}
 8000a20:	e00b      	b.n	8000a3a <Handle_Commands+0x152>
		HAL_UART_Transmit(&huart2, "Unknown Command", 15,100);
 8000a22:	2364      	movs	r3, #100	; 0x64
 8000a24:	220f      	movs	r2, #15
 8000a26:	491a      	ldr	r1, [pc, #104]	; (8000a90 <Handle_Commands+0x1a8>)
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <Handle_Commands+0x168>)
 8000a2a:	f002 fe19 	bl	8003660 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE), 100);
 8000a2e:	2364      	movs	r3, #100	; 0x64
 8000a30:	2208      	movs	r2, #8
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <Handle_Commands+0x16c>)
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <Handle_Commands+0x168>)
 8000a36:	f002 fe13 	bl	8003660 <HAL_UART_Transmit>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000168 	.word	0x20000168
 8000a48:	2000029c 	.word	0x2000029c
 8000a4c:	08004a2c 	.word	0x08004a2c
 8000a50:	200002c8 	.word	0x200002c8
 8000a54:	20000160 	.word	0x20000160
 8000a58:	20000174 	.word	0x20000174
 8000a5c:	08004a3c 	.word	0x08004a3c
 8000a60:	2000018c 	.word	0x2000018c
 8000a64:	08004a4c 	.word	0x08004a4c
 8000a68:	20000180 	.word	0x20000180
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	200001a4 	.word	0x200001a4
 8000a74:	2000034c 	.word	0x2000034c
 8000a78:	200002a8 	.word	0x200002a8
 8000a7c:	2000024c 	.word	0x2000024c
 8000a80:	200001b0 	.word	0x200001b0
 8000a84:	20000198 	.word	0x20000198
 8000a88:	08004a5c 	.word	0x08004a5c
 8000a8c:	2000024f 	.word	0x2000024f
 8000a90:	08004a80 	.word	0x08004a80

08000a94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if(htim==&htim16)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d117      	bne.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		Update_Time(&time);
 8000aa4:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000aa6:	f7ff fe69 	bl	800077c <Update_Time>

		if(interval_var<9)
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b08      	cmp	r3, #8
 8000ab0:	d806      	bhi.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			interval_var++;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000abc:	701a      	strb	r2, [r3, #0]
		}



	}
}
 8000abe:	e009      	b.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0x40>
			TimetoString(&time, &time_str);
 8000ac0:	4909      	ldr	r1, [pc, #36]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ac4:	f7ff fe8b 	bl	80007de <TimetoString>
			Print_Time(&time_str);
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000aca:	f7ff feab 	bl	8000824 <Print_Time>
			interval_var=0;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000034c 	.word	0x2000034c
 8000ae0:	2000024c 	.word	0x2000024c
 8000ae4:	20000250 	.word	0x20000250
 8000ae8:	200002a8 	.word	0x200002a8

08000aec <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a46      	ldr	r2, [pc, #280]	; (8000c14 <HAL_UART_RxCpltCallback+0x128>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	f040 8085 	bne.w	8000c0a <HAL_UART_RxCpltCallback+0x11e>
	{

		if(!strcmp(received,ENTER_CHAR))
 8000b00:	4b45      	ldr	r3, [pc, #276]	; (8000c18 <HAL_UART_RxCpltCallback+0x12c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	220d      	movs	r2, #13
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fb5d 	bl	80001c8 <strcmp>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10d      	bne.n	8000b30 <HAL_UART_RxCpltCallback+0x44>
		{
			HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE), 100);
 8000b14:	2364      	movs	r3, #100	; 0x64
 8000b16:	2208      	movs	r2, #8
 8000b18:	4940      	ldr	r1, [pc, #256]	; (8000c1c <HAL_UART_RxCpltCallback+0x130>)
 8000b1a:	4841      	ldr	r0, [pc, #260]	; (8000c20 <HAL_UART_RxCpltCallback+0x134>)
 8000b1c:	f002 fda0 	bl	8003660 <HAL_UART_Transmit>
			Handle_Commands();
 8000b20:	f7ff fee2 	bl	80008e8 <Handle_Commands>
			Clear_Buffer();
 8000b24:	f7ff fe1e 	bl	8000764 <Clear_Buffer>
			buffer_index=0;
 8000b28:	4b3e      	ldr	r3, [pc, #248]	; (8000c24 <HAL_UART_RxCpltCallback+0x138>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	e04a      	b.n	8000bc6 <HAL_UART_RxCpltCallback+0xda>
		}
		else if((set_timeON==1)&&(!strcmp(received,SEMICOLON_CHAR)))
 8000b30:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <HAL_UART_RxCpltCallback+0x13c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d135      	bne.n	8000ba4 <HAL_UART_RxCpltCallback+0xb8>
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HAL_UART_RxCpltCallback+0x12c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	223b      	movs	r2, #59	; 0x3b
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fb41 	bl	80001c8 <strcmp>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12b      	bne.n	8000ba4 <HAL_UART_RxCpltCallback+0xb8>
		{
			HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE), 100);
 8000b4c:	2364      	movs	r3, #100	; 0x64
 8000b4e:	2208      	movs	r2, #8
 8000b50:	4932      	ldr	r1, [pc, #200]	; (8000c1c <HAL_UART_RxCpltCallback+0x130>)
 8000b52:	4833      	ldr	r0, [pc, #204]	; (8000c20 <HAL_UART_RxCpltCallback+0x134>)
 8000b54:	f002 fd84 	bl	8003660 <HAL_UART_Transmit>
 8000b58:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <HAL_UART_RxCpltCallback+0x140>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	b29b      	uxth	r3, r3

			memcpy(time_str.hour,buffer,2);
 8000b5e:	4a34      	ldr	r2, [pc, #208]	; (8000c30 <HAL_UART_RxCpltCallback+0x144>)
 8000b60:	8013      	strh	r3, [r2, #0]
			memcpy(time_str.minute,buffer+3,2);
 8000b62:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <HAL_UART_RxCpltCallback+0x148>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4a31      	ldr	r2, [pc, #196]	; (8000c30 <HAL_UART_RxCpltCallback+0x144>)
 8000b6a:	8153      	strh	r3, [r2, #10]
			memcpy(time_str.second,buffer+6,2);
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <HAL_UART_RxCpltCallback+0x14c>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <HAL_UART_RxCpltCallback+0x144>)
 8000b74:	8293      	strh	r3, [r2, #20]
			set_timeON=0;
 8000b76:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <HAL_UART_RxCpltCallback+0x13c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
			Clear_Buffer();
 8000b7c:	f7ff fdf2 	bl	8000764 <Clear_Buffer>
			buffer_index=0;
 8000b80:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <HAL_UART_RxCpltCallback+0x138>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
			StringtoTime(&time,&time_str);
 8000b86:	492a      	ldr	r1, [pc, #168]	; (8000c30 <HAL_UART_RxCpltCallback+0x144>)
 8000b88:	482c      	ldr	r0, [pc, #176]	; (8000c3c <HAL_UART_RxCpltCallback+0x150>)
 8000b8a:	f7ff fe89 	bl	80008a0 <StringtoTime>
			TimetoString(&time, &time_str);
 8000b8e:	4928      	ldr	r1, [pc, #160]	; (8000c30 <HAL_UART_RxCpltCallback+0x144>)
 8000b90:	482a      	ldr	r0, [pc, #168]	; (8000c3c <HAL_UART_RxCpltCallback+0x150>)
 8000b92:	f7ff fe24 	bl	80007de <TimetoString>
			Print_Time(&time_str);
 8000b96:	4826      	ldr	r0, [pc, #152]	; (8000c30 <HAL_UART_RxCpltCallback+0x144>)
 8000b98:	f7ff fe44 	bl	8000824 <Print_Time>
			interval_var=0;
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <HAL_UART_RxCpltCallback+0x154>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
		{
 8000ba2:	e010      	b.n	8000bc6 <HAL_UART_RxCpltCallback+0xda>
		}

		else
		{
			HAL_UART_Transmit(&huart2,&received, 1, 100);
 8000ba4:	2364      	movs	r3, #100	; 0x64
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	491b      	ldr	r1, [pc, #108]	; (8000c18 <HAL_UART_RxCpltCallback+0x12c>)
 8000baa:	481d      	ldr	r0, [pc, #116]	; (8000c20 <HAL_UART_RxCpltCallback+0x134>)
 8000bac:	f002 fd58 	bl	8003660 <HAL_UART_Transmit>
			//memcpy(buffer+buffer_index,received,1);
			buffer[buffer_index]=received;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <HAL_UART_RxCpltCallback+0x138>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <HAL_UART_RxCpltCallback+0x12c>)
 8000bb6:	7811      	ldrb	r1, [r2, #0]
 8000bb8:	4a1c      	ldr	r2, [pc, #112]	; (8000c2c <HAL_UART_RxCpltCallback+0x140>)
 8000bba:	54d1      	strb	r1, [r2, r3]
			buffer_index++;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_UART_RxCpltCallback+0x138>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <HAL_UART_RxCpltCallback+0x138>)
 8000bc4:	6013      	str	r3, [r2, #0]
		}

		HAL_UART_Receive_IT(&huart2, &received, 1);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4913      	ldr	r1, [pc, #76]	; (8000c18 <HAL_UART_RxCpltCallback+0x12c>)
 8000bca:	4815      	ldr	r0, [pc, #84]	; (8000c20 <HAL_UART_RxCpltCallback+0x134>)
 8000bcc:	f002 fddc 	bl	8003788 <HAL_UART_Receive_IT>
		if(buffer_index>BUFFER_SIZE)
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_UART_RxCpltCallback+0x138>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b0a      	cmp	r3, #10
 8000bd6:	dd18      	ble.n	8000c0a <HAL_UART_RxCpltCallback+0x11e>
		{
			HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE), 100);
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	2208      	movs	r2, #8
 8000bdc:	490f      	ldr	r1, [pc, #60]	; (8000c1c <HAL_UART_RxCpltCallback+0x130>)
 8000bde:	4810      	ldr	r0, [pc, #64]	; (8000c20 <HAL_UART_RxCpltCallback+0x134>)
 8000be0:	f002 fd3e 	bl	8003660 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,"buffer size exceeded", 30, 100);
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	221e      	movs	r2, #30
 8000be8:	4916      	ldr	r1, [pc, #88]	; (8000c44 <HAL_UART_RxCpltCallback+0x158>)
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <HAL_UART_RxCpltCallback+0x134>)
 8000bec:	f002 fd38 	bl	8003660 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,NEW_LINE, sizeof(NEW_LINE), 100);
 8000bf0:	2364      	movs	r3, #100	; 0x64
 8000bf2:	2208      	movs	r2, #8
 8000bf4:	4909      	ldr	r1, [pc, #36]	; (8000c1c <HAL_UART_RxCpltCallback+0x130>)
 8000bf6:	480a      	ldr	r0, [pc, #40]	; (8000c20 <HAL_UART_RxCpltCallback+0x134>)
 8000bf8:	f002 fd32 	bl	8003660 <HAL_UART_Transmit>
			Handle_Commands();
 8000bfc:	f7ff fe74 	bl	80008e8 <Handle_Commands>
			Clear_Buffer();
 8000c00:	f7ff fdb0 	bl	8000764 <Clear_Buffer>
			buffer_index=0;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <HAL_UART_RxCpltCallback+0x138>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
		}

	}

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40004400 	.word	0x40004400
 8000c18:	20000398 	.word	0x20000398
 8000c1c:	20000160 	.word	0x20000160
 8000c20:	200002c8 	.word	0x200002c8
 8000c24:	20000248 	.word	0x20000248
 8000c28:	2000024f 	.word	0x2000024f
 8000c2c:	2000029c 	.word	0x2000029c
 8000c30:	200002a8 	.word	0x200002a8
 8000c34:	2000029f 	.word	0x2000029f
 8000c38:	200002a2 	.word	0x200002a2
 8000c3c:	2000024c 	.word	0x2000024c
 8000c40:	20000250 	.word	0x20000250
 8000c44:	08004a90 	.word	0x08004a90

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_MspInit+0x44>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <HAL_MspInit+0x44>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6613      	str	r3, [r2, #96]	; 0x60
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <HAL_MspInit+0x44>)
 8000c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_MspInit+0x44>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_MspInit+0x44>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_MspInit+0x44>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000

08000c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_TIM_Base_MspInit+0x44>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d113      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_TIM_Base_MspInit+0x48>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <HAL_TIM_Base_MspInit+0x48>)
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_TIM_Base_MspInit+0x48>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2019      	movs	r0, #25
 8000ccc:	f000 fa7f 	bl	80011ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cd0:	2019      	movs	r0, #25
 8000cd2:	f000 fa98 	bl	8001206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40014400 	.word	0x40014400
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a30      	ldr	r2, [pc, #192]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d159      	bne.n	8000dbe <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0a:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <HAL_UART_MspInit+0xe4>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <HAL_UART_MspInit+0xe4>)
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	6593      	str	r3, [r2, #88]	; 0x58
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <HAL_UART_MspInit+0xe4>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <HAL_UART_MspInit+0xe4>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a29      	ldr	r2, [pc, #164]	; (8000dcc <HAL_UART_MspInit+0xe4>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <HAL_UART_MspInit+0xe4>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f000 fc56 	bl	8001608 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_UART_MspInit+0xe8>)
 8000d5e:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <HAL_UART_MspInit+0xec>)
 8000d60:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_UART_MspInit+0xe8>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_UART_MspInit+0xe8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0xe8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_UART_MspInit+0xe8>)
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_UART_MspInit+0xe8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_UART_MspInit+0xe8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_UART_MspInit+0xe8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_UART_MspInit+0xe8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d92:	480f      	ldr	r0, [pc, #60]	; (8000dd0 <HAL_UART_MspInit+0xe8>)
 8000d94:	f000 fa52 	bl	800123c <HAL_DMA_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8000d9e:	f7ff ff53 	bl	8000c48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_UART_MspInit+0xe8>)
 8000da6:	671a      	str	r2, [r3, #112]	; 0x70
 8000da8:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <HAL_UART_MspInit+0xe8>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2026      	movs	r0, #38	; 0x26
 8000db4:	f000 fa0b 	bl	80011ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000db8:	2026      	movs	r0, #38	; 0x26
 8000dba:	f000 fa24 	bl	8001206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	20000254 	.word	0x20000254
 8000dd4:	4002006c 	.word	0x4002006c

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 f8d8 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DMA1_Channel6_IRQHandler+0x10>)
 8000e32:	f000 fb3a 	bl	80014aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000254 	.word	0x20000254

08000e40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e46:	f002 f9be 	bl	80031c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000034c 	.word	0x2000034c

08000e54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <USART2_IRQHandler+0x10>)
 8000e5a:	f002 fcd9 	bl	8003810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200002c8 	.word	0x200002c8

08000e68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <SystemInit+0x5c>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <SystemInit+0x5c>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <SystemInit+0x60>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <SystemInit+0x60>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <SystemInit+0x60>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <SystemInit+0x60>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <SystemInit+0x60>)
 8000e94:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e98:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <SystemInit+0x60>)
 8000ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <SystemInit+0x60>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <SystemInit+0x60>)
 8000eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SystemInit+0x60>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00
 8000ec8:	40021000 	.word	0x40021000

08000ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed0:	f7ff ffca 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ed4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ed6:	e003      	b.n	8000ee0 <LoopCopyDataInit>

08000ed8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000edc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ede:	3104      	adds	r1, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ee0:	480a      	ldr	r0, [pc, #40]	; (8000f0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ee4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ee6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ee8:	d3f6      	bcc.n	8000ed8 <CopyDataInit>
	ldr	r2, =_sbss
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000eec:	e002      	b.n	8000ef4 <LoopFillZerobss>

08000eee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ef0:	f842 3b04 	str.w	r3, [r2], #4

08000ef4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <LoopForever+0x16>)
	cmp	r2, r3
 8000ef6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ef8:	d3f9      	bcc.n	8000eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f003 fc6f 	bl	80047dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efe:	f7ff fae9 	bl	80004d4 <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f04:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f08:	08004c28 	.word	0x08004c28
	ldr	r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f10:	2000022c 	.word	0x2000022c
	ldr	r2, =_sbss
 8000f14:	2000022c 	.word	0x2000022c
	ldr	r3, = _ebss
 8000f18:	200003a0 	.word	0x200003a0

08000f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_2_IRQHandler>
	...

08000f20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_Init+0x3c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_Init+0x3c>)
 8000f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f36:	2003      	movs	r0, #3
 8000f38:	f000 f93e 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f000 f80f 	bl	8000f60 <HAL_InitTick>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	e001      	b.n	8000f52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f4e:	f7ff fe81 	bl	8000c54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f52:	79fb      	ldrb	r3, [r7, #7]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40022000 	.word	0x40022000

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_InitTick+0x6c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d023      	beq.n	8000fbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_InitTick+0x70>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_InitTick+0x6c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f949 	bl	8001222 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10f      	bne.n	8000fb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d809      	bhi.n	8000fb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 f913 	bl	80011ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_InitTick+0x74>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e007      	b.n	8000fc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e004      	b.n	8000fc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e001      	b.n	8000fc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001c4 	.word	0x200001c4
 8000fd0:	200001bc 	.word	0x200001bc
 8000fd4:	200001c0 	.word	0x200001c0

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200001c4 	.word	0x200001c4
 8000ffc:	2000039c 	.word	0x2000039c

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	2000039c 	.word	0x2000039c

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff8e 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff29 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff3e 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff8e 	bl	800110c <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5d 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff31 	bl	800107c <__NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffa2 	bl	8001174 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e098      	b.n	8001380 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	4b4d      	ldr	r3, [pc, #308]	; (800138c <HAL_DMA_Init+0x150>)
 8001256:	429a      	cmp	r2, r3
 8001258:	d80f      	bhi.n	800127a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <HAL_DMA_Init+0x154>)
 8001262:	4413      	add	r3, r2
 8001264:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_DMA_Init+0x158>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	091b      	lsrs	r3, r3, #4
 800126c:	009a      	lsls	r2, r3, #2
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a48      	ldr	r2, [pc, #288]	; (8001398 <HAL_DMA_Init+0x15c>)
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
 8001278:	e00e      	b.n	8001298 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	4b46      	ldr	r3, [pc, #280]	; (800139c <HAL_DMA_Init+0x160>)
 8001282:	4413      	add	r3, r2
 8001284:	4a43      	ldr	r2, [pc, #268]	; (8001394 <HAL_DMA_Init+0x158>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	009a      	lsls	r2, r3, #2
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a42      	ldr	r2, [pc, #264]	; (80013a0 <HAL_DMA_Init+0x164>)
 8001296:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2202      	movs	r2, #2
 800129c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012f2:	d039      	beq.n	8001368 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a27      	ldr	r2, [pc, #156]	; (8001398 <HAL_DMA_Init+0x15c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d11a      	bne.n	8001334 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <HAL_DMA_Init+0x168>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f003 031c 	and.w	r3, r3, #28
 800130a:	210f      	movs	r1, #15
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	4924      	ldr	r1, [pc, #144]	; (80013a4 <HAL_DMA_Init+0x168>)
 8001314:	4013      	ands	r3, r2
 8001316:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001318:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <HAL_DMA_Init+0x168>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6859      	ldr	r1, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001324:	f003 031c 	and.w	r3, r3, #28
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	491d      	ldr	r1, [pc, #116]	; (80013a4 <HAL_DMA_Init+0x168>)
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
 8001332:	e019      	b.n	8001368 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HAL_DMA_Init+0x16c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133c:	f003 031c 	and.w	r3, r3, #28
 8001340:	210f      	movs	r1, #15
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	4917      	ldr	r1, [pc, #92]	; (80013a8 <HAL_DMA_Init+0x16c>)
 800134a:	4013      	ands	r3, r2
 800134c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_DMA_Init+0x16c>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6859      	ldr	r1, [r3, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f003 031c 	and.w	r3, r3, #28
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	4911      	ldr	r1, [pc, #68]	; (80013a8 <HAL_DMA_Init+0x16c>)
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40020407 	.word	0x40020407
 8001390:	bffdfff8 	.word	0xbffdfff8
 8001394:	cccccccd 	.word	0xcccccccd
 8001398:	40020000 	.word	0x40020000
 800139c:	bffdfbf8 	.word	0xbffdfbf8
 80013a0:	40020400 	.word	0x40020400
 80013a4:	400200a8 	.word	0x400200a8
 80013a8:	400204a8 	.word	0x400204a8

080013ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d008      	beq.n	80013d6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2204      	movs	r2, #4
 80013c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e022      	b.n	800141c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 020e 	bic.w	r2, r2, #14
 80013e4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0201 	bic.w	r2, r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f003 021c 	and.w	r2, r3, #28
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d005      	beq.n	800144c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2204      	movs	r2, #4
 8001444:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e029      	b.n	80014a0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 020e 	bic.w	r2, r2, #14
 800145a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	f003 021c 	and.w	r2, r3, #28
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f202 	lsl.w	r2, r1, r2
 800147e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
    }
  }
  return status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f003 031c 	and.w	r3, r3, #28
 80014ca:	2204      	movs	r2, #4
 80014cc:	409a      	lsls	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d026      	beq.n	8001524 <HAL_DMA_IRQHandler+0x7a>
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d021      	beq.n	8001524 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0320 	and.w	r3, r3, #32
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d107      	bne.n	80014fe <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0204 	bic.w	r2, r2, #4
 80014fc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f003 021c 	and.w	r2, r3, #28
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	2104      	movs	r1, #4
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	2b00      	cmp	r3, #0
 8001518:	d071      	beq.n	80015fe <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001522:	e06c      	b.n	80015fe <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f003 031c 	and.w	r3, r3, #28
 800152c:	2202      	movs	r2, #2
 800152e:	409a      	lsls	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d02e      	beq.n	8001596 <HAL_DMA_IRQHandler+0xec>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d029      	beq.n	8001596 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10b      	bne.n	8001568 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 020a 	bic.w	r2, r2, #10
 800155e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	f003 021c 	and.w	r2, r3, #28
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	2102      	movs	r1, #2
 8001576:	fa01 f202 	lsl.w	r2, r1, r2
 800157a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	2b00      	cmp	r3, #0
 800158a:	d038      	beq.n	80015fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001594:	e033      	b.n	80015fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f003 031c 	and.w	r3, r3, #28
 800159e:	2208      	movs	r2, #8
 80015a0:	409a      	lsls	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d02a      	beq.n	8001600 <HAL_DMA_IRQHandler+0x156>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d025      	beq.n	8001600 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 020e 	bic.w	r2, r2, #14
 80015c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	f003 021c 	and.w	r2, r3, #28
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f202 	lsl.w	r2, r1, r2
 80015d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d004      	beq.n	8001600 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
}
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	e17f      	b.n	8001918 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2101      	movs	r1, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8171 	beq.w	8001912 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d00b      	beq.n	8001650 <HAL_GPIO_Init+0x48>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d007      	beq.n	8001650 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001644:	2b11      	cmp	r3, #17
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b12      	cmp	r3, #18
 800164e:	d130      	bne.n	80016b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001686:	2201      	movs	r2, #1
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 0201 	and.w	r2, r3, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d118      	bne.n	80016f0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016c4:	2201      	movs	r2, #1
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	f003 0201 	and.w	r2, r3, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x128>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b12      	cmp	r3, #18
 800172e:	d123      	bne.n	8001778 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	6939      	ldr	r1, [r7, #16]
 8001774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80ac 	beq.w	8001912 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_GPIO_Init+0x330>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	4a5e      	ldr	r2, [pc, #376]	; (8001938 <HAL_GPIO_Init+0x330>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6613      	str	r3, [r2, #96]	; 0x60
 80017c6:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_GPIO_Init+0x330>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017d2:	4a5a      	ldr	r2, [pc, #360]	; (800193c <HAL_GPIO_Init+0x334>)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017fc:	d025      	beq.n	800184a <HAL_GPIO_Init+0x242>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4f      	ldr	r2, [pc, #316]	; (8001940 <HAL_GPIO_Init+0x338>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01f      	beq.n	8001846 <HAL_GPIO_Init+0x23e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4e      	ldr	r2, [pc, #312]	; (8001944 <HAL_GPIO_Init+0x33c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_Init+0x23a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4d      	ldr	r2, [pc, #308]	; (8001948 <HAL_GPIO_Init+0x340>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x236>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4c      	ldr	r2, [pc, #304]	; (800194c <HAL_GPIO_Init+0x344>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x232>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_GPIO_Init+0x348>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x22e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x34c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x22a>
 800182e:	2306      	movs	r3, #6
 8001830:	e00c      	b.n	800184c <HAL_GPIO_Init+0x244>
 8001832:	2307      	movs	r3, #7
 8001834:	e00a      	b.n	800184c <HAL_GPIO_Init+0x244>
 8001836:	2305      	movs	r3, #5
 8001838:	e008      	b.n	800184c <HAL_GPIO_Init+0x244>
 800183a:	2304      	movs	r3, #4
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x244>
 800183e:	2303      	movs	r3, #3
 8001840:	e004      	b.n	800184c <HAL_GPIO_Init+0x244>
 8001842:	2302      	movs	r3, #2
 8001844:	e002      	b.n	800184c <HAL_GPIO_Init+0x244>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x244>
 800184a:	2300      	movs	r3, #0
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	f002 0203 	and.w	r2, r2, #3
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	4093      	lsls	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800185c:	4937      	ldr	r1, [pc, #220]	; (800193c <HAL_GPIO_Init+0x334>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800186a:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_GPIO_Init+0x350>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800188e:	4a32      	ldr	r2, [pc, #200]	; (8001958 <HAL_GPIO_Init+0x350>)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_GPIO_Init+0x350>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018b8:	4a27      	ldr	r2, [pc, #156]	; (8001958 <HAL_GPIO_Init+0x350>)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_GPIO_Init+0x350>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e2:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_GPIO_Init+0x350>)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_GPIO_Init+0x350>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800190c:	4a12      	ldr	r2, [pc, #72]	; (8001958 <HAL_GPIO_Init+0x350>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	f47f ae78 	bne.w	8001618 <HAL_GPIO_Init+0x10>
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000
 8001940:	48000400 	.word	0x48000400
 8001944:	48000800 	.word	0x48000800
 8001948:	48000c00 	.word	0x48000c00
 800194c:	48001000 	.word	0x48001000
 8001950:	48001400 	.word	0x48001400
 8001954:	48001800 	.word	0x48001800
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001978:	e002      	b.n	8001980 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43d9      	mvns	r1, r3
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	400b      	ands	r3, r1
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40007000 	.word	0x40007000

080019dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ea:	d130      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f8:	d038      	beq.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a02:	4a1e      	ldr	r2, [pc, #120]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2232      	movs	r2, #50	; 0x32
 8001a10:	fb02 f303 	mul.w	r3, r2, r3
 8001a14:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9b      	lsrs	r3, r3, #18
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a20:	e002      	b.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a34:	d102      	bne.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f2      	bne.n	8001a22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a48:	d110      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e00f      	b.n	8001a6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5a:	d007      	beq.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a64:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	200001bc 	.word	0x200001bc
 8001a84:	431bde83 	.word	0x431bde83

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e3d4      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9a:	4ba1      	ldr	r3, [pc, #644]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa4:	4b9e      	ldr	r3, [pc, #632]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80e4 	beq.w	8001c84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x4a>
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b0c      	cmp	r3, #12
 8001ac6:	f040 808b 	bne.w	8001be0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	f040 8087 	bne.w	8001be0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad2:	4b93      	ldr	r3, [pc, #588]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x62>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e3ac      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1a      	ldr	r2, [r3, #32]
 8001aee:	4b8c      	ldr	r3, [pc, #560]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d004      	beq.n	8001b04 <HAL_RCC_OscConfig+0x7c>
 8001afa:	4b89      	ldr	r3, [pc, #548]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b02:	e005      	b.n	8001b10 <HAL_RCC_OscConfig+0x88>
 8001b04:	4b86      	ldr	r3, [pc, #536]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d223      	bcs.n	8001b5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 fd41 	bl	80025a0 <RCC_SetFlashLatencyFromMSIRange>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e38d      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b28:	4b7d      	ldr	r3, [pc, #500]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a7c      	ldr	r2, [pc, #496]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b7a      	ldr	r3, [pc, #488]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4977      	ldr	r1, [pc, #476]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b46:	4b76      	ldr	r3, [pc, #472]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	4972      	ldr	r1, [pc, #456]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
 8001b5a:	e025      	b.n	8001ba8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5c:	4b70      	ldr	r3, [pc, #448]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a6f      	ldr	r2, [pc, #444]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b62:	f043 0308 	orr.w	r3, r3, #8
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b6d      	ldr	r3, [pc, #436]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	496a      	ldr	r1, [pc, #424]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7a:	4b69      	ldr	r3, [pc, #420]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	4965      	ldr	r1, [pc, #404]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fd01 	bl	80025a0 <RCC_SetFlashLatencyFromMSIRange>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e34d      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ba8:	f000 fc36 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b5c      	ldr	r3, [pc, #368]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	495a      	ldr	r1, [pc, #360]	; (8001d24 <HAL_RCC_OscConfig+0x29c>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	4a58      	ldr	r2, [pc, #352]	; (8001d28 <HAL_RCC_OscConfig+0x2a0>)
 8001bc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bc8:	4b58      	ldr	r3, [pc, #352]	; (8001d2c <HAL_RCC_OscConfig+0x2a4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f9c7 	bl	8000f60 <HAL_InitTick>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d052      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	e331      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d032      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001be8:	4b4d      	ldr	r3, [pc, #308]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a4c      	ldr	r2, [pc, #304]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fa04 	bl	8001000 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fa00 	bl	8001000 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e31a      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c0e:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1a:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a40      	ldr	r2, [pc, #256]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b3e      	ldr	r3, [pc, #248]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	493b      	ldr	r1, [pc, #236]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c38:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	4936      	ldr	r1, [pc, #216]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
 8001c4c:	e01a      	b.n	8001c84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c4e:	4b34      	ldr	r3, [pc, #208]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a33      	ldr	r2, [pc, #204]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f9d1 	bl	8001000 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c62:	f7ff f9cd 	bl	8001000 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e2e7      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x1da>
 8001c80:	e000      	b.n	8001c84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d074      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x21a>
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b0c      	cmp	r3, #12
 8001c9a:	d10e      	bne.n	8001cba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d10b      	bne.n	8001cba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d064      	beq.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d160      	bne.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e2c4      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x24a>
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e01d      	b.n	8001d0e <HAL_RCC_OscConfig+0x286>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cda:	d10c      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x26e>
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0c      	ldr	r2, [pc, #48]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e00b      	b.n	8001d0e <HAL_RCC_OscConfig+0x286>
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <HAL_RCC_OscConfig+0x298>)
 8001d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d01c      	beq.n	8001d50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff f973 	bl	8001000 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1c:	e011      	b.n	8001d42 <HAL_RCC_OscConfig+0x2ba>
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	08004aa8 	.word	0x08004aa8
 8001d28:	200001bc 	.word	0x200001bc
 8001d2c:	200001c0 	.word	0x200001c0
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff f966 	bl	8001000 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e280      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d42:	4baf      	ldr	r3, [pc, #700]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2a8>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff f956 	bl	8001000 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff f952 	bl	8001000 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e26c      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6a:	4ba5      	ldr	r3, [pc, #660]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x2d0>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d060      	beq.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_OscConfig+0x310>
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d119      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d116      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d98:	4b99      	ldr	r3, [pc, #612]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_OscConfig+0x328>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e249      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b93      	ldr	r3, [pc, #588]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	4990      	ldr	r1, [pc, #576]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	e040      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d023      	beq.n	8001e16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dce:	4b8c      	ldr	r3, [pc, #560]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a8b      	ldr	r2, [pc, #556]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff f911 	bl	8001000 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff f90d 	bl	8001000 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e227      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df4:	4b82      	ldr	r3, [pc, #520]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b7f      	ldr	r3, [pc, #508]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	497c      	ldr	r1, [pc, #496]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	e018      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b7a      	ldr	r3, [pc, #488]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a79      	ldr	r2, [pc, #484]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff f8ed 	bl	8001000 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7ff f8e9 	bl	8001000 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e203      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e3c:	4b70      	ldr	r3, [pc, #448]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d03c      	beq.n	8001ece <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5c:	4b68      	ldr	r3, [pc, #416]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e62:	4a67      	ldr	r2, [pc, #412]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f8c8 	bl	8001000 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff f8c4 	bl	8001000 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1de      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e86:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ef      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3ec>
 8001e94:	e01b      	b.n	8001ece <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e96:	4b5a      	ldr	r3, [pc, #360]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9c:	4a58      	ldr	r2, [pc, #352]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f8ab 	bl	8001000 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eae:	f7ff f8a7 	bl	8001000 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e1c1      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec0:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ef      	bne.n	8001eae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80a6 	beq.w	8002028 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ee0:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4b44      	ldr	r3, [pc, #272]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a43      	ldr	r2, [pc, #268]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef8:	4b41      	ldr	r3, [pc, #260]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f08:	4b3e      	ldr	r3, [pc, #248]	; (8002004 <HAL_RCC_OscConfig+0x57c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d118      	bne.n	8001f46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f14:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_RCC_OscConfig+0x57c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <HAL_RCC_OscConfig+0x57c>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f20:	f7ff f86e 	bl	8001000 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f28:	f7ff f86a 	bl	8001000 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e184      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3a:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_RCC_OscConfig+0x57c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d108      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4d8>
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	4a2a      	ldr	r2, [pc, #168]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f5e:	e024      	b.n	8001faa <HAL_RCC_OscConfig+0x522>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d110      	bne.n	8001f8a <HAL_RCC_OscConfig+0x502>
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	4a24      	ldr	r2, [pc, #144]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	4a20      	ldr	r2, [pc, #128]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f88:	e00f      	b.n	8001faa <HAL_RCC_OscConfig+0x522>
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	f023 0304 	bic.w	r3, r3, #4
 8001fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d016      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb2:	f7ff f825 	bl	8001000 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff f821 	bl	8001000 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e139      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_OscConfig+0x578>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0ed      	beq.n	8001fba <HAL_RCC_OscConfig+0x532>
 8001fde:	e01a      	b.n	8002016 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f80e 	bl	8001000 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe6:	e00f      	b.n	8002008 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f80a 	bl	8001000 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d906      	bls.n	8002008 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e122      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002008:	4b90      	ldr	r3, [pc, #576]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e8      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002016:	7ffb      	ldrb	r3, [r7, #31]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201c:	4b8b      	ldr	r3, [pc, #556]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	4a8a      	ldr	r2, [pc, #552]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 8002022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002026:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8108 	beq.w	8002242 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	2b02      	cmp	r3, #2
 8002038:	f040 80d0 	bne.w	80021dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800203c:	4b83      	ldr	r3, [pc, #524]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0203 	and.w	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	429a      	cmp	r2, r3
 800204e:	d130      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	3b01      	subs	r3, #1
 800205c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d127      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d11f      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800207c:	2a07      	cmp	r2, #7
 800207e:	bf14      	ite	ne
 8002080:	2201      	movne	r2, #1
 8002082:	2200      	moveq	r2, #0
 8002084:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002086:	4293      	cmp	r3, r2
 8002088:	d113      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	085b      	lsrs	r3, r3, #1
 80020aa:	3b01      	subs	r3, #1
 80020ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d06e      	beq.n	8002190 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d069      	beq.n	800218c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020b8:	4b64      	ldr	r3, [pc, #400]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020c4:	4b61      	ldr	r3, [pc, #388]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0b7      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020d4:	4b5d      	ldr	r3, [pc, #372]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a5c      	ldr	r2, [pc, #368]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80020da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e0:	f7fe ff8e 	bl	8001000 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe ff8a 	bl	8001000 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0a4      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fa:	4b54      	ldr	r3, [pc, #336]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002106:	4b51      	ldr	r3, [pc, #324]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	4b51      	ldr	r3, [pc, #324]	; (8002250 <HAL_RCC_OscConfig+0x7c8>)
 800210c:	4013      	ands	r3, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002116:	3a01      	subs	r2, #1
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002120:	0212      	lsls	r2, r2, #8
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002128:	0852      	lsrs	r2, r2, #1
 800212a:	3a01      	subs	r2, #1
 800212c:	0552      	lsls	r2, r2, #21
 800212e:	4311      	orrs	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002134:	0852      	lsrs	r2, r2, #1
 8002136:	3a01      	subs	r2, #1
 8002138:	0652      	lsls	r2, r2, #25
 800213a:	4311      	orrs	r1, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002140:	0912      	lsrs	r2, r2, #4
 8002142:	0452      	lsls	r2, r2, #17
 8002144:	430a      	orrs	r2, r1
 8002146:	4941      	ldr	r1, [pc, #260]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800214c:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a3e      	ldr	r2, [pc, #248]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 8002152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002156:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002158:	4b3c      	ldr	r3, [pc, #240]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a3b      	ldr	r2, [pc, #236]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 800215e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002162:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002164:	f7fe ff4c 	bl	8001000 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe ff48 	bl	8001000 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e062      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217e:	4b33      	ldr	r3, [pc, #204]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800218a:	e05a      	b.n	8002242 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e059      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002190:	4b2e      	ldr	r3, [pc, #184]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d152      	bne.n	8002242 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800219c:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a2a      	ldr	r2, [pc, #168]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80021a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021b4:	f7fe ff24 	bl	8001000 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe ff20 	bl	8001000 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e03a      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ce:	4b1f      	ldr	r3, [pc, #124]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x734>
 80021da:	e032      	b.n	8002242 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d02d      	beq.n	800223e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a19      	ldr	r2, [pc, #100]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80021e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4a13      	ldr	r2, [pc, #76]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 8002200:	f023 0303 	bic.w	r3, r3, #3
 8002204:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4a10      	ldr	r2, [pc, #64]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 800220c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002214:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002216:	f7fe fef3 	bl	8001000 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7fe feef 	bl	8001000 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e009      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_RCC_OscConfig+0x7c4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x796>
 800223c:	e001      	b.n	8002242 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	f99d808c 	.word	0xf99d808c

08002254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0c8      	b.n	80023fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002268:	4b66      	ldr	r3, [pc, #408]	; (8002404 <HAL_RCC_ClockConfig+0x1b0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d910      	bls.n	8002298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b63      	ldr	r3, [pc, #396]	; (8002404 <HAL_RCC_ClockConfig+0x1b0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 0207 	bic.w	r2, r3, #7
 800227e:	4961      	ldr	r1, [pc, #388]	; (8002404 <HAL_RCC_ClockConfig+0x1b0>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <HAL_RCC_ClockConfig+0x1b0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0b0      	b.n	80023fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d04c      	beq.n	800233e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ac:	4b56      	ldr	r3, [pc, #344]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d121      	bne.n	80022fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e09e      	b.n	80023fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c4:	4b50      	ldr	r3, [pc, #320]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d115      	bne.n	80022fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e092      	b.n	80023fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022dc:	4b4a      	ldr	r3, [pc, #296]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d109      	bne.n	80022fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e086      	b.n	80023fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ec:	4b46      	ldr	r3, [pc, #280]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e07e      	b.n	80023fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022fc:	4b42      	ldr	r3, [pc, #264]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 0203 	bic.w	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	493f      	ldr	r1, [pc, #252]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800230e:	f7fe fe77 	bl	8001000 <HAL_GetTick>
 8002312:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002314:	e00a      	b.n	800232c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002316:	f7fe fe73 	bl	8001000 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e066      	b.n	80023fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232c:	4b36      	ldr	r3, [pc, #216]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 020c 	and.w	r2, r3, #12
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	429a      	cmp	r2, r3
 800233c:	d1eb      	bne.n	8002316 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d008      	beq.n	800235c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234a:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	492c      	ldr	r1, [pc, #176]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_RCC_ClockConfig+0x1b0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d210      	bcs.n	800238c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b26      	ldr	r3, [pc, #152]	; (8002404 <HAL_RCC_ClockConfig+0x1b0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 0207 	bic.w	r2, r3, #7
 8002372:	4924      	ldr	r1, [pc, #144]	; (8002404 <HAL_RCC_ClockConfig+0x1b0>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b22      	ldr	r3, [pc, #136]	; (8002404 <HAL_RCC_ClockConfig+0x1b0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e036      	b.n	80023fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4918      	ldr	r1, [pc, #96]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4910      	ldr	r1, [pc, #64]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ca:	f000 f825 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_RCC_ClockConfig+0x1b4>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	490c      	ldr	r1, [pc, #48]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	5ccb      	ldrb	r3, [r1, r3]
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fdb6 	bl	8000f60 <HAL_InitTick>
 80023f4:	4603      	mov	r3, r0
 80023f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80023f8:	7afb      	ldrb	r3, [r7, #11]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40022000 	.word	0x40022000
 8002408:	40021000 	.word	0x40021000
 800240c:	08004aa8 	.word	0x08004aa8
 8002410:	200001bc 	.word	0x200001bc
 8002414:	200001c0 	.word	0x200001c0

08002418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002426:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x34>
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d121      	bne.n	800248a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d11e      	bne.n	800248a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800244c:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 800245a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e005      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002474:	4a2b      	ldr	r2, [pc, #172]	; (8002524 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10d      	bne.n	80024a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b04      	cmp	r3, #4
 800248e:	d102      	bne.n	8002496 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <HAL_RCC_GetSysClockFreq+0x110>)
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	e004      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_RCC_GetSysClockFreq+0x114>)
 800249e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d134      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d003      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0xa6>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d003      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0xac>
 80024bc:	e005      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <HAL_RCC_GetSysClockFreq+0x110>)
 80024c0:	617b      	str	r3, [r7, #20]
      break;
 80024c2:	e005      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_GetSysClockFreq+0x114>)
 80024c6:	617b      	str	r3, [r7, #20]
      break;
 80024c8:	e002      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	617b      	str	r3, [r7, #20]
      break;
 80024ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	3301      	adds	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	fb02 f203 	mul.w	r2, r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	0e5b      	lsrs	r3, r3, #25
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	3301      	adds	r3, #1
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002510:	69bb      	ldr	r3, [r7, #24]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	08004ac0 	.word	0x08004ac0
 8002528:	00f42400 	.word	0x00f42400
 800252c:	007a1200 	.word	0x007a1200

08002530 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_RCC_GetHCLKFreq+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	200001bc 	.word	0x200001bc

08002548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800254c:	f7ff fff0 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4904      	ldr	r1, [pc, #16]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	08004ab8 	.word	0x08004ab8

08002574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002578:	f7ff ffda 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0adb      	lsrs	r3, r3, #11
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4904      	ldr	r1, [pc, #16]	; (800259c <HAL_RCC_GetPCLK2Freq+0x28>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	08004ab8 	.word	0x08004ab8

080025a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025ac:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025b8:	f7ff fa02 	bl	80019c0 <HAL_PWREx_GetVoltageRange>
 80025bc:	6178      	str	r0, [r7, #20]
 80025be:	e014      	b.n	80025ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	4a24      	ldr	r2, [pc, #144]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ca:	6593      	str	r3, [r2, #88]	; 0x58
 80025cc:	4b22      	ldr	r3, [pc, #136]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025d8:	f7ff f9f2 	bl	80019c0 <HAL_PWREx_GetVoltageRange>
 80025dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f0:	d10b      	bne.n	800260a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b80      	cmp	r3, #128	; 0x80
 80025f6:	d919      	bls.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2ba0      	cmp	r3, #160	; 0xa0
 80025fc:	d902      	bls.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025fe:	2302      	movs	r3, #2
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e013      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002604:	2301      	movs	r3, #1
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e010      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b80      	cmp	r3, #128	; 0x80
 800260e:	d902      	bls.n	8002616 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002610:	2303      	movs	r3, #3
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	e00a      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d102      	bne.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800261c:	2302      	movs	r3, #2
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e004      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b70      	cmp	r3, #112	; 0x70
 8002626:	d101      	bne.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002628:	2301      	movs	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 0207 	bic.w	r2, r3, #7
 8002634:	4909      	ldr	r1, [pc, #36]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	40022000 	.word	0x40022000

08002660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002668:	2300      	movs	r3, #0
 800266a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800266c:	2300      	movs	r3, #0
 800266e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002678:	2b00      	cmp	r3, #0
 800267a:	d041      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002680:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002684:	d02a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002686:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800268a:	d824      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800268c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002690:	d008      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002692:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002696:	d81e      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800269c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a0:	d010      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026a2:	e018      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026a4:	4b86      	ldr	r3, [pc, #536]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a85      	ldr	r2, [pc, #532]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026b0:	e015      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fabb 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c2:	e00c      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3320      	adds	r3, #32
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fba6 	bl	8002e1c <RCCEx_PLLSAI2_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026d4:	e003      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	74fb      	strb	r3, [r7, #19]
      break;
 80026da:	e000      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026de:	7cfb      	ldrb	r3, [r7, #19]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026e4:	4b76      	ldr	r3, [pc, #472]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f2:	4973      	ldr	r1, [pc, #460]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026fa:	e001      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d041      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002710:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002714:	d02a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002716:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800271a:	d824      	bhi.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800271c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002720:	d008      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002726:	d81e      	bhi.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002730:	d010      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002732:	e018      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002734:	4b62      	ldr	r3, [pc, #392]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a61      	ldr	r2, [pc, #388]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002740:	e015      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fa73 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002752:	e00c      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3320      	adds	r3, #32
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fb5e 	bl	8002e1c <RCCEx_PLLSAI2_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002764:	e003      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	74fb      	strb	r3, [r7, #19]
      break;
 800276a:	e000      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800276c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10b      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002774:	4b52      	ldr	r3, [pc, #328]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002782:	494f      	ldr	r1, [pc, #316]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800278a:	e001      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a0 	beq.w	80028de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00d      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b8:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	4a40      	ldr	r2, [pc, #256]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c2:	6593      	str	r3, [r2, #88]	; 0x58
 80027c4:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d0:	2301      	movs	r3, #1
 80027d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d4:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fc0e 	bl	8001000 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027e6:	e009      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e8:	f7fe fc0a 	bl	8001000 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d902      	bls.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	74fb      	strb	r3, [r7, #19]
        break;
 80027fa:	e005      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027fc:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ef      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d15c      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800280e:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002818:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01f      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	d019      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002836:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002848:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002858:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d016      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe fbc9 	bl	8001000 <HAL_GetTick>
 800286e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002870:	e00b      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe fbc5 	bl	8001000 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d902      	bls.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	74fb      	strb	r3, [r7, #19]
            break;
 8002888:	e006      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288a:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ec      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ae:	4904      	ldr	r1, [pc, #16]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028b6:	e009      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	74bb      	strb	r3, [r7, #18]
 80028bc:	e006      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028cc:	7c7b      	ldrb	r3, [r7, #17]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d105      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d2:	4b9e      	ldr	r3, [pc, #632]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	4a9d      	ldr	r2, [pc, #628]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ea:	4b98      	ldr	r3, [pc, #608]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f023 0203 	bic.w	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	4994      	ldr	r1, [pc, #592]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800290c:	4b8f      	ldr	r3, [pc, #572]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f023 020c 	bic.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	498c      	ldr	r1, [pc, #560]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800292e:	4b87      	ldr	r3, [pc, #540]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	4983      	ldr	r1, [pc, #524]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002950:	4b7e      	ldr	r3, [pc, #504]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	497b      	ldr	r1, [pc, #492]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002972:	4b76      	ldr	r3, [pc, #472]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002980:	4972      	ldr	r1, [pc, #456]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002994:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	496a      	ldr	r1, [pc, #424]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	4961      	ldr	r1, [pc, #388]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029d8:	4b5c      	ldr	r3, [pc, #368]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e6:	4959      	ldr	r1, [pc, #356]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029fa:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a08:	4950      	ldr	r1, [pc, #320]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a1c:	4b4b      	ldr	r3, [pc, #300]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	4948      	ldr	r1, [pc, #288]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a3e:	4b43      	ldr	r3, [pc, #268]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	493f      	ldr	r1, [pc, #252]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d028      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a60:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6e:	4937      	ldr	r1, [pc, #220]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a31      	ldr	r2, [pc, #196]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
 8002a8c:	e011      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a96:	d10c      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f8c8 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d028      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002abe:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	491f      	ldr	r1, [pc, #124]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002adc:	d106      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4a1a      	ldr	r2, [pc, #104]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae8:	60d3      	str	r3, [r2, #12]
 8002aea:	e011      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2101      	movs	r1, #1
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 f899 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d02b      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2a:	4908      	ldr	r1, [pc, #32]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3a:	d109      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a02      	ldr	r2, [pc, #8]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b46:	60d3      	str	r3, [r2, #12]
 8002b48:	e014      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 f867 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d02f      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b80:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b8e:	4928      	ldr	r1, [pc, #160]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b9e:	d10d      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f844 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d014      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	74bb      	strb	r3, [r7, #18]
 8002bba:	e011      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3320      	adds	r3, #32
 8002bca:	2102      	movs	r1, #2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f925 	bl	8002e1c <RCCEx_PLLSAI2_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bfa:	490d      	ldr	r1, [pc, #52]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c1e:	4904      	ldr	r1, [pc, #16]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c26:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000

08002c34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c42:	4b75      	ldr	r3, [pc, #468]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c4e:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0203 	and.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d10d      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
       ||
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c66:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
       ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d047      	beq.n	8002d0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e044      	b.n	8002d0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d018      	beq.n	8002cba <RCCEx_PLLSAI1_Config+0x86>
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d825      	bhi.n	8002cd8 <RCCEx_PLLSAI1_Config+0xa4>
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d002      	beq.n	8002c96 <RCCEx_PLLSAI1_Config+0x62>
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d009      	beq.n	8002ca8 <RCCEx_PLLSAI1_Config+0x74>
 8002c94:	e020      	b.n	8002cd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c96:	4b60      	ldr	r3, [pc, #384]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11d      	bne.n	8002cde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca6:	e01a      	b.n	8002cde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ca8:	4b5b      	ldr	r3, [pc, #364]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d116      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb8:	e013      	b.n	8002ce2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cba:	4b57      	ldr	r3, [pc, #348]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cc6:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cd6:	e006      	b.n	8002ce6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      break;
 8002cdc:	e004      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e002      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ce6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10d      	bne.n	8002d0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cee:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6819      	ldr	r1, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	430b      	orrs	r3, r1
 8002d04:	4944      	ldr	r1, [pc, #272]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d17d      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d10:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a40      	ldr	r2, [pc, #256]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1c:	f7fe f970 	bl	8001000 <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d22:	e009      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d24:	f7fe f96c 	bl	8001000 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d902      	bls.n	8002d38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	73fb      	strb	r3, [r7, #15]
        break;
 8002d36:	e005      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d38:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1ef      	bne.n	8002d24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d160      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d111      	bne.n	8002d74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d50:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6892      	ldr	r2, [r2, #8]
 8002d60:	0211      	lsls	r1, r2, #8
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68d2      	ldr	r2, [r2, #12]
 8002d66:	0912      	lsrs	r2, r2, #4
 8002d68:	0452      	lsls	r2, r2, #17
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	492a      	ldr	r1, [pc, #168]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	610b      	str	r3, [r1, #16]
 8002d72:	e027      	b.n	8002dc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d112      	bne.n	8002da0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d7a:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6892      	ldr	r2, [r2, #8]
 8002d8a:	0211      	lsls	r1, r2, #8
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6912      	ldr	r2, [r2, #16]
 8002d90:	0852      	lsrs	r2, r2, #1
 8002d92:	3a01      	subs	r2, #1
 8002d94:	0552      	lsls	r2, r2, #21
 8002d96:	430a      	orrs	r2, r1
 8002d98:	491f      	ldr	r1, [pc, #124]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	610b      	str	r3, [r1, #16]
 8002d9e:	e011      	b.n	8002dc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002da8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6892      	ldr	r2, [r2, #8]
 8002db0:	0211      	lsls	r1, r2, #8
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6952      	ldr	r2, [r2, #20]
 8002db6:	0852      	lsrs	r2, r2, #1
 8002db8:	3a01      	subs	r2, #1
 8002dba:	0652      	lsls	r2, r2, #25
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	4916      	ldr	r1, [pc, #88]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fe f916 	bl	8001000 <HAL_GetTick>
 8002dd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dd6:	e009      	b.n	8002dec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dd8:	f7fe f912 	bl	8001000 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d902      	bls.n	8002dec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	73fb      	strb	r3, [r7, #15]
          break;
 8002dea:	e005      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ef      	beq.n	8002dd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	4904      	ldr	r1, [pc, #16]	; (8002e18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000

08002e1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e2a:	4b6a      	ldr	r3, [pc, #424]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d018      	beq.n	8002e68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e36:	4b67      	ldr	r3, [pc, #412]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0203 	and.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10d      	bne.n	8002e62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
       ||
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e4e:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d047      	beq.n	8002ef2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e044      	b.n	8002ef2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d018      	beq.n	8002ea2 <RCCEx_PLLSAI2_Config+0x86>
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d825      	bhi.n	8002ec0 <RCCEx_PLLSAI2_Config+0xa4>
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d002      	beq.n	8002e7e <RCCEx_PLLSAI2_Config+0x62>
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d009      	beq.n	8002e90 <RCCEx_PLLSAI2_Config+0x74>
 8002e7c:	e020      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e7e:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11d      	bne.n	8002ec6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e01a      	b.n	8002ec6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e90:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d116      	bne.n	8002eca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e013      	b.n	8002eca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ea2:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10f      	bne.n	8002ece <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eae:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ebe:	e006      	b.n	8002ece <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e004      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ece:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ed6:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	430b      	orrs	r3, r1
 8002eec:	4939      	ldr	r1, [pc, #228]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d167      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a35      	ldr	r2, [pc, #212]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f04:	f7fe f87c 	bl	8001000 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f0a:	e009      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f0c:	f7fe f878 	bl	8001000 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d902      	bls.n	8002f20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f1e:	e005      	b.n	8002f2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f20:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ef      	bne.n	8002f0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d14a      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d111      	bne.n	8002f5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f38:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	0211      	lsls	r1, r2, #8
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	0912      	lsrs	r2, r2, #4
 8002f50:	0452      	lsls	r2, r2, #17
 8002f52:	430a      	orrs	r2, r1
 8002f54:	491f      	ldr	r1, [pc, #124]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	614b      	str	r3, [r1, #20]
 8002f5a:	e011      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6892      	ldr	r2, [r2, #8]
 8002f6c:	0211      	lsls	r1, r2, #8
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6912      	ldr	r2, [r2, #16]
 8002f72:	0852      	lsrs	r2, r2, #1
 8002f74:	3a01      	subs	r2, #1
 8002f76:	0652      	lsls	r2, r2, #25
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	4916      	ldr	r1, [pc, #88]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe f838 	bl	8001000 <HAL_GetTick>
 8002f90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f92:	e009      	b.n	8002fa8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f94:	f7fe f834 	bl	8001000 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d902      	bls.n	8002fa8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fa6:	e005      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4904      	ldr	r1, [pc, #16]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e049      	b.n	800307e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd fe4c 	bl	8000c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f000 fa1c 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d001      	beq.n	80030a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e04f      	b.n	8003140 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a23      	ldr	r2, [pc, #140]	; (800314c <HAL_TIM_Base_Start_IT+0xc4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01d      	beq.n	80030fe <HAL_TIM_Base_Start_IT+0x76>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ca:	d018      	beq.n	80030fe <HAL_TIM_Base_Start_IT+0x76>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1f      	ldr	r2, [pc, #124]	; (8003150 <HAL_TIM_Base_Start_IT+0xc8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_TIM_Base_Start_IT+0x76>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_TIM_Base_Start_IT+0xcc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00e      	beq.n	80030fe <HAL_TIM_Base_Start_IT+0x76>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1c      	ldr	r2, [pc, #112]	; (8003158 <HAL_TIM_Base_Start_IT+0xd0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_TIM_Base_Start_IT+0x76>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1b      	ldr	r2, [pc, #108]	; (800315c <HAL_TIM_Base_Start_IT+0xd4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d004      	beq.n	80030fe <HAL_TIM_Base_Start_IT+0x76>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_TIM_Base_Start_IT+0xd8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d115      	bne.n	800312a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_TIM_Base_Start_IT+0xdc>)
 8003106:	4013      	ands	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b06      	cmp	r3, #6
 800310e:	d015      	beq.n	800313c <HAL_TIM_Base_Start_IT+0xb4>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003116:	d011      	beq.n	800313c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003128:	e008      	b.n	800313c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e000      	b.n	800313e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40000400 	.word	0x40000400
 8003154:	40000800 	.word	0x40000800
 8003158:	40000c00 	.word	0x40000c00
 800315c:	40013400 	.word	0x40013400
 8003160:	40014000 	.word	0x40014000
 8003164:	00010007 	.word	0x00010007

08003168 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6a1a      	ldr	r2, [r3, #32]
 8003186:	f241 1311 	movw	r3, #4369	; 0x1111
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10f      	bne.n	80031b0 <HAL_TIM_Base_Stop_IT+0x48>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	f240 4344 	movw	r3, #1092	; 0x444
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <HAL_TIM_Base_Stop_IT+0x48>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d122      	bne.n	8003222 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d11b      	bne.n	8003222 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f06f 0202 	mvn.w	r2, #2
 80031f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f905 	bl	8003418 <HAL_TIM_IC_CaptureCallback>
 800320e:	e005      	b.n	800321c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f8f7 	bl	8003404 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f908 	bl	800342c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b04      	cmp	r3, #4
 800322e:	d122      	bne.n	8003276 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b04      	cmp	r3, #4
 800323c:	d11b      	bne.n	8003276 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f06f 0204 	mvn.w	r2, #4
 8003246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f8db 	bl	8003418 <HAL_TIM_IC_CaptureCallback>
 8003262:	e005      	b.n	8003270 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f8cd 	bl	8003404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f8de 	bl	800342c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b08      	cmp	r3, #8
 8003282:	d122      	bne.n	80032ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b08      	cmp	r3, #8
 8003290:	d11b      	bne.n	80032ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f06f 0208 	mvn.w	r2, #8
 800329a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2204      	movs	r2, #4
 80032a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f8b1 	bl	8003418 <HAL_TIM_IC_CaptureCallback>
 80032b6:	e005      	b.n	80032c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f8a3 	bl	8003404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8b4 	bl	800342c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d122      	bne.n	800331e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d11b      	bne.n	800331e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f06f 0210 	mvn.w	r2, #16
 80032ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2208      	movs	r2, #8
 80032f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f887 	bl	8003418 <HAL_TIM_IC_CaptureCallback>
 800330a:	e005      	b.n	8003318 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f879 	bl	8003404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f88a 	bl	800342c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10e      	bne.n	800334a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d107      	bne.n	800334a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f06f 0201 	mvn.w	r2, #1
 8003342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7fd fba5 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003354:	2b80      	cmp	r3, #128	; 0x80
 8003356:	d10e      	bne.n	8003376 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b80      	cmp	r3, #128	; 0x80
 8003364:	d107      	bne.n	8003376 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800336e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f913 	bl	800359c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003384:	d10e      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d107      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f906 	bl	80035b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d10e      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d107      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f838 	bl	8003440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d10e      	bne.n	80033fc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d107      	bne.n	80033fc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0220 	mvn.w	r2, #32
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f8c6 	bl	8003588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a40      	ldr	r2, [pc, #256]	; (8003568 <TIM_Base_SetConfig+0x114>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d013      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003472:	d00f      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a3d      	ldr	r2, [pc, #244]	; (800356c <TIM_Base_SetConfig+0x118>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a3c      	ldr	r2, [pc, #240]	; (8003570 <TIM_Base_SetConfig+0x11c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a3b      	ldr	r2, [pc, #236]	; (8003574 <TIM_Base_SetConfig+0x120>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a3a      	ldr	r2, [pc, #232]	; (8003578 <TIM_Base_SetConfig+0x124>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d108      	bne.n	80034a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2f      	ldr	r2, [pc, #188]	; (8003568 <TIM_Base_SetConfig+0x114>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01f      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d01b      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2c      	ldr	r2, [pc, #176]	; (800356c <TIM_Base_SetConfig+0x118>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d017      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2b      	ldr	r2, [pc, #172]	; (8003570 <TIM_Base_SetConfig+0x11c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a2a      	ldr	r2, [pc, #168]	; (8003574 <TIM_Base_SetConfig+0x120>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00f      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a29      	ldr	r2, [pc, #164]	; (8003578 <TIM_Base_SetConfig+0x124>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00b      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a28      	ldr	r2, [pc, #160]	; (800357c <TIM_Base_SetConfig+0x128>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a27      	ldr	r2, [pc, #156]	; (8003580 <TIM_Base_SetConfig+0x12c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d003      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a26      	ldr	r2, [pc, #152]	; (8003584 <TIM_Base_SetConfig+0x130>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d108      	bne.n	8003500 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a10      	ldr	r2, [pc, #64]	; (8003568 <TIM_Base_SetConfig+0x114>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00f      	beq.n	800354c <TIM_Base_SetConfig+0xf8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <TIM_Base_SetConfig+0x124>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00b      	beq.n	800354c <TIM_Base_SetConfig+0xf8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a11      	ldr	r2, [pc, #68]	; (800357c <TIM_Base_SetConfig+0x128>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <TIM_Base_SetConfig+0xf8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a10      	ldr	r2, [pc, #64]	; (8003580 <TIM_Base_SetConfig+0x12c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0xf8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <TIM_Base_SetConfig+0x130>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d103      	bne.n	8003554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	615a      	str	r2, [r3, #20]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800
 8003574:	40000c00 	.word	0x40000c00
 8003578:	40013400 	.word	0x40013400
 800357c:	40014000 	.word	0x40014000
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800

08003588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e040      	b.n	8003658 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd fb7e 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2224      	movs	r2, #36	; 0x24
 80035f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fb26 	bl	8003c54 <UART_SetConfig>
 8003608:	4603      	mov	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e022      	b.n	8003658 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fda4 	bl	8004168 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800363e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fe2b 	bl	80042ac <UART_CheckIdleState>
 8003656:	4603      	mov	r3, r0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003674:	2b20      	cmp	r3, #32
 8003676:	f040 8082 	bne.w	800377e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_UART_Transmit+0x26>
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e07a      	b.n	8003780 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_UART_Transmit+0x38>
 8003694:	2302      	movs	r3, #2
 8003696:	e073      	b.n	8003780 <HAL_UART_Transmit+0x120>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2221      	movs	r2, #33	; 0x21
 80036ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ae:	f7fd fca7 	bl	8001000 <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	88fa      	ldrh	r2, [r7, #6]
 80036c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036cc:	d108      	bne.n	80036e0 <HAL_UART_Transmit+0x80>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d104      	bne.n	80036e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	e003      	b.n	80036e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036f0:	e02d      	b.n	800374e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2200      	movs	r2, #0
 80036fa:	2180      	movs	r1, #128	; 0x80
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fe1e 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e039      	b.n	8003780 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10b      	bne.n	800372a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800371e:	b292      	uxth	r2, r2
 8003720:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	3302      	adds	r3, #2
 8003726:	61bb      	str	r3, [r7, #24]
 8003728:	e008      	b.n	800373c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	b292      	uxth	r2, r2
 8003734:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3301      	adds	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1cb      	bne.n	80036f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fdea 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e005      	b.n	8003780 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800377e:	2302      	movs	r3, #2
  }
}
 8003780:	4618      	mov	r0, r3
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800379a:	2b20      	cmp	r3, #32
 800379c:	d131      	bne.n	8003802 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HAL_UART_Receive_IT+0x22>
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e02a      	b.n	8003804 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_UART_Receive_IT+0x34>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e023      	b.n	8003804 <HAL_UART_Receive_IT+0x7c>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a0f      	ldr	r2, [pc, #60]	; (800380c <HAL_UART_Receive_IT+0x84>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037f0:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	461a      	mov	r2, r3
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fe1d 	bl	8004438 <UART_Start_Receive_IT>
 80037fe:	4603      	mov	r3, r0
 8003800:	e000      	b.n	8003804 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003802:	2302      	movs	r3, #2
  }
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40008000 	.word	0x40008000

08003810 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f640 030f 	movw	r3, #2063	; 0x80f
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d113      	bne.n	8003868 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00e      	beq.n	8003868 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 81ce 	beq.w	8003bfa <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	4798      	blx	r3
      }
      return;
 8003866:	e1c8      	b.n	8003bfa <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80e3 	beq.w	8003a36 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4ba6      	ldr	r3, [pc, #664]	; (8003b18 <HAL_UART_IRQHandler+0x308>)
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80d8 	beq.w	8003a36 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d010      	beq.n	80038b2 <HAL_UART_IRQHandler+0xa2>
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2201      	movs	r2, #1
 80038a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a8:	f043 0201 	orr.w	r2, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_UART_IRQHandler+0xce>
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00b      	beq.n	80038de <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2202      	movs	r2, #2
 80038cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d4:	f043 0204 	orr.w	r2, r3, #4
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d010      	beq.n	800390a <HAL_UART_IRQHandler+0xfa>
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2204      	movs	r2, #4
 80038f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003900:	f043 0202 	orr.w	r2, r3, #2
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d015      	beq.n	8003940 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2208      	movs	r2, #8
 800392e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003936:	f043 0208 	orr.w	r2, r3, #8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003946:	2b00      	cmp	r3, #0
 8003948:	d011      	beq.n	800396e <HAL_UART_IRQHandler+0x15e>
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00c      	beq.n	800396e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800395c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8142 	beq.w	8003bfe <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00c      	beq.n	800399e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b40      	cmp	r3, #64	; 0x40
 80039b2:	d004      	beq.n	80039be <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d031      	beq.n	8003a22 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fdc2 	bl	8004548 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d123      	bne.n	8003a1a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d013      	beq.n	8003a12 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	4a4b      	ldr	r2, [pc, #300]	; (8003b1c <HAL_UART_IRQHandler+0x30c>)
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd fd16 	bl	8001428 <HAL_DMA_Abort_IT>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d017      	beq.n	8003a32 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	e00f      	b.n	8003a32 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f908 	bl	8003c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	e00b      	b.n	8003a32 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f904 	bl	8003c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	e007      	b.n	8003a32 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f900 	bl	8003c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003a30:	e0e5      	b.n	8003bfe <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a32:	bf00      	nop
    return;
 8003a34:	e0e3      	b.n	8003bfe <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	f040 80a9 	bne.w	8003b92 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80a3 	beq.w	8003b92 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 809d 	beq.w	8003b92 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	d158      	bne.n	8003b20 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003a78:	893b      	ldrh	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80c1 	beq.w	8003c02 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a86:	893a      	ldrh	r2, [r7, #8]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	f080 80ba 	bcs.w	8003c02 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	893a      	ldrh	r2, [r7, #8]
 8003a92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d12a      	bne.n	8003afc <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0210 	bic.w	r2, r2, #16
 8003af0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd fc58 	bl	80013ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f893 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b16:	e074      	b.n	8003c02 <HAL_UART_IRQHandler+0x3f2>
 8003b18:	04000120 	.word	0x04000120
 8003b1c:	080045a7 	.word	0x080045a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d063      	beq.n	8003c06 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003b3e:	897b      	ldrh	r3, [r7, #10]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d060      	beq.n	8003c06 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b52:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0210 	bic.w	r2, r2, #16
 8003b84:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b86:	897b      	ldrh	r3, [r7, #10]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f856 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b90:	e039      	b.n	8003c06 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00d      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x3a8>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fdff 	bl	80047b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bb6:	e029      	b.n	8003c0c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01a      	beq.n	8003c0a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
    }
    return;
 8003bdc:	e015      	b.n	8003c0a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d011      	beq.n	8003c0c <HAL_UART_IRQHandler+0x3fc>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fced 	bl	80045d2 <UART_EndTransmit_IT>
    return;
 8003bf8:	e008      	b.n	8003c0c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003bfa:	bf00      	nop
 8003bfc:	e006      	b.n	8003c0c <HAL_UART_IRQHandler+0x3fc>
    return;
 8003bfe:	bf00      	nop
 8003c00:	e004      	b.n	8003c0c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <HAL_UART_IRQHandler+0x3fc>
    return;
 8003c0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop

08003c14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b5b0      	push	{r4, r5, r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4bad      	ldr	r3, [pc, #692]	; (8003f34 <UART_SetConfig+0x2e0>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	69f9      	ldr	r1, [r7, #28]
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4aa2      	ldr	r2, [pc, #648]	; (8003f38 <UART_SetConfig+0x2e4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a99      	ldr	r2, [pc, #612]	; (8003f3c <UART_SetConfig+0x2e8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d121      	bne.n	8003d1e <UART_SetConfig+0xca>
 8003cda:	4b99      	ldr	r3, [pc, #612]	; (8003f40 <UART_SetConfig+0x2ec>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d817      	bhi.n	8003d18 <UART_SetConfig+0xc4>
 8003ce8:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <UART_SetConfig+0x9c>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d01 	.word	0x08003d01
 8003cf4:	08003d0d 	.word	0x08003d0d
 8003cf8:	08003d07 	.word	0x08003d07
 8003cfc:	08003d13 	.word	0x08003d13
 8003d00:	2301      	movs	r3, #1
 8003d02:	76fb      	strb	r3, [r7, #27]
 8003d04:	e0e7      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003d06:	2302      	movs	r3, #2
 8003d08:	76fb      	strb	r3, [r7, #27]
 8003d0a:	e0e4      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	76fb      	strb	r3, [r7, #27]
 8003d10:	e0e1      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003d12:	2308      	movs	r3, #8
 8003d14:	76fb      	strb	r3, [r7, #27]
 8003d16:	e0de      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	76fb      	strb	r3, [r7, #27]
 8003d1c:	e0db      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a88      	ldr	r2, [pc, #544]	; (8003f44 <UART_SetConfig+0x2f0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d132      	bne.n	8003d8e <UART_SetConfig+0x13a>
 8003d28:	4b85      	ldr	r3, [pc, #532]	; (8003f40 <UART_SetConfig+0x2ec>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d828      	bhi.n	8003d88 <UART_SetConfig+0x134>
 8003d36:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <UART_SetConfig+0xe8>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003d71 	.word	0x08003d71
 8003d40:	08003d89 	.word	0x08003d89
 8003d44:	08003d89 	.word	0x08003d89
 8003d48:	08003d89 	.word	0x08003d89
 8003d4c:	08003d7d 	.word	0x08003d7d
 8003d50:	08003d89 	.word	0x08003d89
 8003d54:	08003d89 	.word	0x08003d89
 8003d58:	08003d89 	.word	0x08003d89
 8003d5c:	08003d77 	.word	0x08003d77
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d89 	.word	0x08003d89
 8003d68:	08003d89 	.word	0x08003d89
 8003d6c:	08003d83 	.word	0x08003d83
 8003d70:	2300      	movs	r3, #0
 8003d72:	76fb      	strb	r3, [r7, #27]
 8003d74:	e0af      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003d76:	2302      	movs	r3, #2
 8003d78:	76fb      	strb	r3, [r7, #27]
 8003d7a:	e0ac      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	76fb      	strb	r3, [r7, #27]
 8003d80:	e0a9      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003d82:	2308      	movs	r3, #8
 8003d84:	76fb      	strb	r3, [r7, #27]
 8003d86:	e0a6      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	76fb      	strb	r3, [r7, #27]
 8003d8c:	e0a3      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6d      	ldr	r2, [pc, #436]	; (8003f48 <UART_SetConfig+0x2f4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d120      	bne.n	8003dda <UART_SetConfig+0x186>
 8003d98:	4b69      	ldr	r3, [pc, #420]	; (8003f40 <UART_SetConfig+0x2ec>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003da2:	2b30      	cmp	r3, #48	; 0x30
 8003da4:	d013      	beq.n	8003dce <UART_SetConfig+0x17a>
 8003da6:	2b30      	cmp	r3, #48	; 0x30
 8003da8:	d814      	bhi.n	8003dd4 <UART_SetConfig+0x180>
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d009      	beq.n	8003dc2 <UART_SetConfig+0x16e>
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d810      	bhi.n	8003dd4 <UART_SetConfig+0x180>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <UART_SetConfig+0x168>
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d006      	beq.n	8003dc8 <UART_SetConfig+0x174>
 8003dba:	e00b      	b.n	8003dd4 <UART_SetConfig+0x180>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	76fb      	strb	r3, [r7, #27]
 8003dc0:	e089      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	76fb      	strb	r3, [r7, #27]
 8003dc6:	e086      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	76fb      	strb	r3, [r7, #27]
 8003dcc:	e083      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	76fb      	strb	r3, [r7, #27]
 8003dd2:	e080      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	76fb      	strb	r3, [r7, #27]
 8003dd8:	e07d      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a5b      	ldr	r2, [pc, #364]	; (8003f4c <UART_SetConfig+0x2f8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d120      	bne.n	8003e26 <UART_SetConfig+0x1d2>
 8003de4:	4b56      	ldr	r3, [pc, #344]	; (8003f40 <UART_SetConfig+0x2ec>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dee:	2bc0      	cmp	r3, #192	; 0xc0
 8003df0:	d013      	beq.n	8003e1a <UART_SetConfig+0x1c6>
 8003df2:	2bc0      	cmp	r3, #192	; 0xc0
 8003df4:	d814      	bhi.n	8003e20 <UART_SetConfig+0x1cc>
 8003df6:	2b80      	cmp	r3, #128	; 0x80
 8003df8:	d009      	beq.n	8003e0e <UART_SetConfig+0x1ba>
 8003dfa:	2b80      	cmp	r3, #128	; 0x80
 8003dfc:	d810      	bhi.n	8003e20 <UART_SetConfig+0x1cc>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <UART_SetConfig+0x1b4>
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d006      	beq.n	8003e14 <UART_SetConfig+0x1c0>
 8003e06:	e00b      	b.n	8003e20 <UART_SetConfig+0x1cc>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	76fb      	strb	r3, [r7, #27]
 8003e0c:	e063      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	76fb      	strb	r3, [r7, #27]
 8003e12:	e060      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003e14:	2304      	movs	r3, #4
 8003e16:	76fb      	strb	r3, [r7, #27]
 8003e18:	e05d      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	76fb      	strb	r3, [r7, #27]
 8003e1e:	e05a      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003e20:	2310      	movs	r3, #16
 8003e22:	76fb      	strb	r3, [r7, #27]
 8003e24:	e057      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a49      	ldr	r2, [pc, #292]	; (8003f50 <UART_SetConfig+0x2fc>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d125      	bne.n	8003e7c <UART_SetConfig+0x228>
 8003e30:	4b43      	ldr	r3, [pc, #268]	; (8003f40 <UART_SetConfig+0x2ec>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e3e:	d017      	beq.n	8003e70 <UART_SetConfig+0x21c>
 8003e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e44:	d817      	bhi.n	8003e76 <UART_SetConfig+0x222>
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4a:	d00b      	beq.n	8003e64 <UART_SetConfig+0x210>
 8003e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e50:	d811      	bhi.n	8003e76 <UART_SetConfig+0x222>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <UART_SetConfig+0x20a>
 8003e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5a:	d006      	beq.n	8003e6a <UART_SetConfig+0x216>
 8003e5c:	e00b      	b.n	8003e76 <UART_SetConfig+0x222>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	76fb      	strb	r3, [r7, #27]
 8003e62:	e038      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003e64:	2302      	movs	r3, #2
 8003e66:	76fb      	strb	r3, [r7, #27]
 8003e68:	e035      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003e6a:	2304      	movs	r3, #4
 8003e6c:	76fb      	strb	r3, [r7, #27]
 8003e6e:	e032      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003e70:	2308      	movs	r3, #8
 8003e72:	76fb      	strb	r3, [r7, #27]
 8003e74:	e02f      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003e76:	2310      	movs	r3, #16
 8003e78:	76fb      	strb	r3, [r7, #27]
 8003e7a:	e02c      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2d      	ldr	r2, [pc, #180]	; (8003f38 <UART_SetConfig+0x2e4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d125      	bne.n	8003ed2 <UART_SetConfig+0x27e>
 8003e86:	4b2e      	ldr	r3, [pc, #184]	; (8003f40 <UART_SetConfig+0x2ec>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e94:	d017      	beq.n	8003ec6 <UART_SetConfig+0x272>
 8003e96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e9a:	d817      	bhi.n	8003ecc <UART_SetConfig+0x278>
 8003e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea0:	d00b      	beq.n	8003eba <UART_SetConfig+0x266>
 8003ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea6:	d811      	bhi.n	8003ecc <UART_SetConfig+0x278>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <UART_SetConfig+0x260>
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb0:	d006      	beq.n	8003ec0 <UART_SetConfig+0x26c>
 8003eb2:	e00b      	b.n	8003ecc <UART_SetConfig+0x278>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	76fb      	strb	r3, [r7, #27]
 8003eb8:	e00d      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	76fb      	strb	r3, [r7, #27]
 8003ebe:	e00a      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	76fb      	strb	r3, [r7, #27]
 8003ec4:	e007      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	76fb      	strb	r3, [r7, #27]
 8003eca:	e004      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003ecc:	2310      	movs	r3, #16
 8003ece:	76fb      	strb	r3, [r7, #27]
 8003ed0:	e001      	b.n	8003ed6 <UART_SetConfig+0x282>
 8003ed2:	2310      	movs	r3, #16
 8003ed4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a17      	ldr	r2, [pc, #92]	; (8003f38 <UART_SetConfig+0x2e4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	f040 8087 	bne.w	8003ff0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ee2:	7efb      	ldrb	r3, [r7, #27]
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d837      	bhi.n	8003f58 <UART_SetConfig+0x304>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0x29c>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f59 	.word	0x08003f59
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f59 	.word	0x08003f59
 8003f00:	08003f23 	.word	0x08003f23
 8003f04:	08003f59 	.word	0x08003f59
 8003f08:	08003f59 	.word	0x08003f59
 8003f0c:	08003f59 	.word	0x08003f59
 8003f10:	08003f2b 	.word	0x08003f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7fe fb18 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8003f18:	6178      	str	r0, [r7, #20]
        break;
 8003f1a:	e022      	b.n	8003f62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <UART_SetConfig+0x300>)
 8003f1e:	617b      	str	r3, [r7, #20]
        break;
 8003f20:	e01f      	b.n	8003f62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f22:	f7fe fa79 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8003f26:	6178      	str	r0, [r7, #20]
        break;
 8003f28:	e01b      	b.n	8003f62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2e:	617b      	str	r3, [r7, #20]
        break;
 8003f30:	e017      	b.n	8003f62 <UART_SetConfig+0x30e>
 8003f32:	bf00      	nop
 8003f34:	efff69f3 	.word	0xefff69f3
 8003f38:	40008000 	.word	0x40008000
 8003f3c:	40013800 	.word	0x40013800
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40004400 	.word	0x40004400
 8003f48:	40004800 	.word	0x40004800
 8003f4c:	40004c00 	.word	0x40004c00
 8003f50:	40005000 	.word	0x40005000
 8003f54:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	76bb      	strb	r3, [r7, #26]
        break;
 8003f60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80f1 	beq.w	800414c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d305      	bcc.n	8003f86 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d902      	bls.n	8003f8c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	76bb      	strb	r3, [r7, #26]
 8003f8a:	e0df      	b.n	800414c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	020b      	lsls	r3, r1, #8
 8003f9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fa2:	0202      	lsls	r2, r0, #8
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	6849      	ldr	r1, [r1, #4]
 8003fa8:	0849      	lsrs	r1, r1, #1
 8003faa:	4608      	mov	r0, r1
 8003fac:	f04f 0100 	mov.w	r1, #0
 8003fb0:	1814      	adds	r4, r2, r0
 8003fb2:	eb43 0501 	adc.w	r5, r3, r1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	f7fc f90a 	bl	80001dc <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4613      	mov	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fd6:	d308      	bcc.n	8003fea <UART_SetConfig+0x396>
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fde:	d204      	bcs.n	8003fea <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	60da      	str	r2, [r3, #12]
 8003fe8:	e0b0      	b.n	800414c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	76bb      	strb	r3, [r7, #26]
 8003fee:	e0ad      	b.n	800414c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff8:	d15c      	bne.n	80040b4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003ffa:	7efb      	ldrb	r3, [r7, #27]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d828      	bhi.n	8004052 <UART_SetConfig+0x3fe>
 8004000:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <UART_SetConfig+0x3b4>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	0800402d 	.word	0x0800402d
 800400c:	08004035 	.word	0x08004035
 8004010:	0800403d 	.word	0x0800403d
 8004014:	08004053 	.word	0x08004053
 8004018:	08004043 	.word	0x08004043
 800401c:	08004053 	.word	0x08004053
 8004020:	08004053 	.word	0x08004053
 8004024:	08004053 	.word	0x08004053
 8004028:	0800404b 	.word	0x0800404b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800402c:	f7fe fa8c 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8004030:	6178      	str	r0, [r7, #20]
        break;
 8004032:	e013      	b.n	800405c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7fe fa9e 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 8004038:	6178      	str	r0, [r7, #20]
        break;
 800403a:	e00f      	b.n	800405c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800403c:	4b49      	ldr	r3, [pc, #292]	; (8004164 <UART_SetConfig+0x510>)
 800403e:	617b      	str	r3, [r7, #20]
        break;
 8004040:	e00c      	b.n	800405c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004042:	f7fe f9e9 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8004046:	6178      	str	r0, [r7, #20]
        break;
 8004048:	e008      	b.n	800405c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404e:	617b      	str	r3, [r7, #20]
        break;
 8004050:	e004      	b.n	800405c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	76bb      	strb	r3, [r7, #26]
        break;
 800405a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d074      	beq.n	800414c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	005a      	lsls	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	441a      	add	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	b29b      	uxth	r3, r3
 8004078:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b0f      	cmp	r3, #15
 800407e:	d916      	bls.n	80040ae <UART_SetConfig+0x45a>
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004086:	d212      	bcs.n	80040ae <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	b29b      	uxth	r3, r3
 800408c:	f023 030f 	bic.w	r3, r3, #15
 8004090:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	b29b      	uxth	r3, r3
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	b29a      	uxth	r2, r3
 800409e:	89fb      	ldrh	r3, [r7, #14]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	89fa      	ldrh	r2, [r7, #14]
 80040aa:	60da      	str	r2, [r3, #12]
 80040ac:	e04e      	b.n	800414c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	76bb      	strb	r3, [r7, #26]
 80040b2:	e04b      	b.n	800414c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040b4:	7efb      	ldrb	r3, [r7, #27]
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d827      	bhi.n	800410a <UART_SetConfig+0x4b6>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <UART_SetConfig+0x46c>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040f5 	.word	0x080040f5
 80040cc:	0800410b 	.word	0x0800410b
 80040d0:	080040fb 	.word	0x080040fb
 80040d4:	0800410b 	.word	0x0800410b
 80040d8:	0800410b 	.word	0x0800410b
 80040dc:	0800410b 	.word	0x0800410b
 80040e0:	08004103 	.word	0x08004103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7fe fa30 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 80040e8:	6178      	str	r0, [r7, #20]
        break;
 80040ea:	e013      	b.n	8004114 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ec:	f7fe fa42 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 80040f0:	6178      	str	r0, [r7, #20]
        break;
 80040f2:	e00f      	b.n	8004114 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <UART_SetConfig+0x510>)
 80040f6:	617b      	str	r3, [r7, #20]
        break;
 80040f8:	e00c      	b.n	8004114 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fa:	f7fe f98d 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80040fe:	6178      	str	r0, [r7, #20]
        break;
 8004100:	e008      	b.n	8004114 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004106:	617b      	str	r3, [r7, #20]
        break;
 8004108:	e004      	b.n	8004114 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	76bb      	strb	r3, [r7, #26]
        break;
 8004112:	bf00      	nop
    }

    if (pclk != 0U)
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d018      	beq.n	800414c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	085a      	lsrs	r2, r3, #1
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	441a      	add	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	fbb2 f3f3 	udiv	r3, r2, r3
 800412c:	b29b      	uxth	r3, r3
 800412e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b0f      	cmp	r3, #15
 8004134:	d908      	bls.n	8004148 <UART_SetConfig+0x4f4>
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d204      	bcs.n	8004148 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	e001      	b.n	800414c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004158:	7ebb      	ldrb	r3, [r7, #26]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bdb0      	pop	{r4, r5, r7, pc}
 8004162:	bf00      	nop
 8004164:	00f42400 	.word	0x00f42400

08004168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01a      	beq.n	800427e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004266:	d10a      	bne.n	800427e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
  }
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042bc:	f7fc fea0 	bl	8001000 <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d10e      	bne.n	80042ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f82d 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e023      	b.n	8004336 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d10e      	bne.n	800431a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f817 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e00d      	b.n	8004336 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	4613      	mov	r3, r2
 800434c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800434e:	e05e      	b.n	800440e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d05a      	beq.n	800440e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004358:	f7fc fe52 	bl	8001000 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	429a      	cmp	r2, r3
 8004366:	d302      	bcc.n	800436e <UART_WaitOnFlagUntilTimeout+0x30>
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d11b      	bne.n	80043a6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800437c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e043      	b.n	800442e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d02c      	beq.n	800440e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c2:	d124      	bne.n	800440e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043cc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043dc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e00f      	b.n	800442e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4013      	ands	r3, r2
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	429a      	cmp	r2, r3
 800442a:	d091      	beq.n	8004350 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	d10e      	bne.n	800448a <UART_Start_Receive_IT+0x52>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <UART_Start_Receive_IT+0x48>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f240 12ff 	movw	r2, #511	; 0x1ff
 800447a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800447e:	e02d      	b.n	80044dc <UART_Start_Receive_IT+0xa4>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	22ff      	movs	r2, #255	; 0xff
 8004484:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004488:	e028      	b.n	80044dc <UART_Start_Receive_IT+0xa4>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10d      	bne.n	80044ae <UART_Start_Receive_IT+0x76>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <UART_Start_Receive_IT+0x6c>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044a2:	e01b      	b.n	80044dc <UART_Start_Receive_IT+0xa4>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	227f      	movs	r2, #127	; 0x7f
 80044a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044ac:	e016      	b.n	80044dc <UART_Start_Receive_IT+0xa4>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044b6:	d10d      	bne.n	80044d4 <UART_Start_Receive_IT+0x9c>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d104      	bne.n	80044ca <UART_Start_Receive_IT+0x92>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	227f      	movs	r2, #127	; 0x7f
 80044c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044c8:	e008      	b.n	80044dc <UART_Start_Receive_IT+0xa4>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	223f      	movs	r2, #63	; 0x3f
 80044ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044d2:	e003      	b.n	80044dc <UART_Start_Receive_IT+0xa4>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2222      	movs	r2, #34	; 0x22
 80044e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004502:	d107      	bne.n	8004514 <UART_Start_Receive_IT+0xdc>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d103      	bne.n	8004514 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a0c      	ldr	r2, [pc, #48]	; (8004540 <UART_Start_Receive_IT+0x108>)
 8004510:	665a      	str	r2, [r3, #100]	; 0x64
 8004512:	e002      	b.n	800451a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4a0b      	ldr	r2, [pc, #44]	; (8004544 <UART_Start_Receive_IT+0x10c>)
 8004518:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004530:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	080046dd 	.word	0x080046dd
 8004544:	08004605 	.word	0x08004605

08004548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800455e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0201 	bic.w	r2, r2, #1
 800456e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004574:	2b01      	cmp	r3, #1
 8004576:	d107      	bne.n	8004588 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0210 	bic.w	r2, r2, #16
 8004586:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	665a      	str	r2, [r3, #100]	; 0x64
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f7ff fb2f 	bl	8003c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff fb0c 	bl	8003c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004612:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004618:	2b22      	cmp	r3, #34	; 0x22
 800461a:	d151      	bne.n	80046c0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004622:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004624:	89bb      	ldrh	r3, [r7, #12]
 8004626:	b2d9      	uxtb	r1, r3
 8004628:	89fb      	ldrh	r3, [r7, #14]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	400a      	ands	r2, r1
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d13a      	bne.n	80046d4 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800466c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0201 	bic.w	r2, r2, #1
 800467c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468e:	2b01      	cmp	r3, #1
 8004690:	d10f      	bne.n	80046b2 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0210 	bic.w	r2, r2, #16
 80046a0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff fac6 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
 80046b0:	e002      	b.n	80046b8 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc fa1a 	bl	8000aec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046be:	e009      	b.n	80046d4 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	8b1b      	ldrh	r3, [r3, #24]
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0208 	orr.w	r2, r2, #8
 80046d0:	b292      	uxth	r2, r2
 80046d2:	831a      	strh	r2, [r3, #24]
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046ea:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f0:	2b22      	cmp	r3, #34	; 0x22
 80046f2:	d151      	bne.n	8004798 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046fa:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004700:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004702:	89ba      	ldrh	r2, [r7, #12]
 8004704:	89fb      	ldrh	r3, [r7, #14]
 8004706:	4013      	ands	r3, r2
 8004708:	b29a      	uxth	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	1c9a      	adds	r2, r3, #2
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d13a      	bne.n	80047ac <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004744:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0201 	bic.w	r2, r2, #1
 8004754:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004766:	2b01      	cmp	r3, #1
 8004768:	d10f      	bne.n	800478a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0210 	bic.w	r2, r2, #16
 8004778:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004780:	4619      	mov	r1, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff fa5a 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
 8004788:	e002      	b.n	8004790 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fc f9ae 	bl	8000aec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004796:	e009      	b.n	80047ac <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	8b1b      	ldrh	r3, [r3, #24]
 800479e:	b29a      	uxth	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0208 	orr.w	r2, r2, #8
 80047a8:	b292      	uxth	r2, r2
 80047aa:	831a      	strh	r2, [r3, #24]
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <atoi>:
 80047c8:	220a      	movs	r2, #10
 80047ca:	2100      	movs	r1, #0
 80047cc:	f000 b8d0 	b.w	8004970 <strtol>

080047d0 <__errno>:
 80047d0:	4b01      	ldr	r3, [pc, #4]	; (80047d8 <__errno+0x8>)
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	200001c8 	.word	0x200001c8

080047dc <__libc_init_array>:
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	4d0d      	ldr	r5, [pc, #52]	; (8004814 <__libc_init_array+0x38>)
 80047e0:	4c0d      	ldr	r4, [pc, #52]	; (8004818 <__libc_init_array+0x3c>)
 80047e2:	1b64      	subs	r4, r4, r5
 80047e4:	10a4      	asrs	r4, r4, #2
 80047e6:	2600      	movs	r6, #0
 80047e8:	42a6      	cmp	r6, r4
 80047ea:	d109      	bne.n	8004800 <__libc_init_array+0x24>
 80047ec:	4d0b      	ldr	r5, [pc, #44]	; (800481c <__libc_init_array+0x40>)
 80047ee:	4c0c      	ldr	r4, [pc, #48]	; (8004820 <__libc_init_array+0x44>)
 80047f0:	f000 f90a 	bl	8004a08 <_init>
 80047f4:	1b64      	subs	r4, r4, r5
 80047f6:	10a4      	asrs	r4, r4, #2
 80047f8:	2600      	movs	r6, #0
 80047fa:	42a6      	cmp	r6, r4
 80047fc:	d105      	bne.n	800480a <__libc_init_array+0x2e>
 80047fe:	bd70      	pop	{r4, r5, r6, pc}
 8004800:	f855 3b04 	ldr.w	r3, [r5], #4
 8004804:	4798      	blx	r3
 8004806:	3601      	adds	r6, #1
 8004808:	e7ee      	b.n	80047e8 <__libc_init_array+0xc>
 800480a:	f855 3b04 	ldr.w	r3, [r5], #4
 800480e:	4798      	blx	r3
 8004810:	3601      	adds	r6, #1
 8004812:	e7f2      	b.n	80047fa <__libc_init_array+0x1e>
 8004814:	08004c20 	.word	0x08004c20
 8004818:	08004c20 	.word	0x08004c20
 800481c:	08004c20 	.word	0x08004c20
 8004820:	08004c24 	.word	0x08004c24

08004824 <__itoa>:
 8004824:	1e93      	subs	r3, r2, #2
 8004826:	2b22      	cmp	r3, #34	; 0x22
 8004828:	b510      	push	{r4, lr}
 800482a:	460c      	mov	r4, r1
 800482c:	d904      	bls.n	8004838 <__itoa+0x14>
 800482e:	2300      	movs	r3, #0
 8004830:	700b      	strb	r3, [r1, #0]
 8004832:	461c      	mov	r4, r3
 8004834:	4620      	mov	r0, r4
 8004836:	bd10      	pop	{r4, pc}
 8004838:	2a0a      	cmp	r2, #10
 800483a:	d109      	bne.n	8004850 <__itoa+0x2c>
 800483c:	2800      	cmp	r0, #0
 800483e:	da07      	bge.n	8004850 <__itoa+0x2c>
 8004840:	232d      	movs	r3, #45	; 0x2d
 8004842:	700b      	strb	r3, [r1, #0]
 8004844:	4240      	negs	r0, r0
 8004846:	2101      	movs	r1, #1
 8004848:	4421      	add	r1, r4
 800484a:	f000 f89b 	bl	8004984 <__utoa>
 800484e:	e7f1      	b.n	8004834 <__itoa+0x10>
 8004850:	2100      	movs	r1, #0
 8004852:	e7f9      	b.n	8004848 <__itoa+0x24>

08004854 <itoa>:
 8004854:	f7ff bfe6 	b.w	8004824 <__itoa>

08004858 <memset>:
 8004858:	4402      	add	r2, r0
 800485a:	4603      	mov	r3, r0
 800485c:	4293      	cmp	r3, r2
 800485e:	d100      	bne.n	8004862 <memset+0xa>
 8004860:	4770      	bx	lr
 8004862:	f803 1b01 	strb.w	r1, [r3], #1
 8004866:	e7f9      	b.n	800485c <memset+0x4>

08004868 <_strtol_l.isra.0>:
 8004868:	2b01      	cmp	r3, #1
 800486a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800486e:	d001      	beq.n	8004874 <_strtol_l.isra.0+0xc>
 8004870:	2b24      	cmp	r3, #36	; 0x24
 8004872:	d906      	bls.n	8004882 <_strtol_l.isra.0+0x1a>
 8004874:	f7ff ffac 	bl	80047d0 <__errno>
 8004878:	2316      	movs	r3, #22
 800487a:	6003      	str	r3, [r0, #0]
 800487c:	2000      	movs	r0, #0
 800487e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004882:	4f3a      	ldr	r7, [pc, #232]	; (800496c <_strtol_l.isra.0+0x104>)
 8004884:	468e      	mov	lr, r1
 8004886:	4676      	mov	r6, lr
 8004888:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800488c:	5de5      	ldrb	r5, [r4, r7]
 800488e:	f015 0508 	ands.w	r5, r5, #8
 8004892:	d1f8      	bne.n	8004886 <_strtol_l.isra.0+0x1e>
 8004894:	2c2d      	cmp	r4, #45	; 0x2d
 8004896:	d134      	bne.n	8004902 <_strtol_l.isra.0+0x9a>
 8004898:	f89e 4000 	ldrb.w	r4, [lr]
 800489c:	f04f 0801 	mov.w	r8, #1
 80048a0:	f106 0e02 	add.w	lr, r6, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d05c      	beq.n	8004962 <_strtol_l.isra.0+0xfa>
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d10c      	bne.n	80048c6 <_strtol_l.isra.0+0x5e>
 80048ac:	2c30      	cmp	r4, #48	; 0x30
 80048ae:	d10a      	bne.n	80048c6 <_strtol_l.isra.0+0x5e>
 80048b0:	f89e 4000 	ldrb.w	r4, [lr]
 80048b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80048b8:	2c58      	cmp	r4, #88	; 0x58
 80048ba:	d14d      	bne.n	8004958 <_strtol_l.isra.0+0xf0>
 80048bc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80048c0:	2310      	movs	r3, #16
 80048c2:	f10e 0e02 	add.w	lr, lr, #2
 80048c6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80048ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80048ce:	2600      	movs	r6, #0
 80048d0:	fbbc f9f3 	udiv	r9, ip, r3
 80048d4:	4635      	mov	r5, r6
 80048d6:	fb03 ca19 	mls	sl, r3, r9, ip
 80048da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80048de:	2f09      	cmp	r7, #9
 80048e0:	d818      	bhi.n	8004914 <_strtol_l.isra.0+0xac>
 80048e2:	463c      	mov	r4, r7
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	dd24      	ble.n	8004932 <_strtol_l.isra.0+0xca>
 80048e8:	2e00      	cmp	r6, #0
 80048ea:	db1f      	blt.n	800492c <_strtol_l.isra.0+0xc4>
 80048ec:	45a9      	cmp	r9, r5
 80048ee:	d31d      	bcc.n	800492c <_strtol_l.isra.0+0xc4>
 80048f0:	d101      	bne.n	80048f6 <_strtol_l.isra.0+0x8e>
 80048f2:	45a2      	cmp	sl, r4
 80048f4:	db1a      	blt.n	800492c <_strtol_l.isra.0+0xc4>
 80048f6:	fb05 4503 	mla	r5, r5, r3, r4
 80048fa:	2601      	movs	r6, #1
 80048fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004900:	e7eb      	b.n	80048da <_strtol_l.isra.0+0x72>
 8004902:	2c2b      	cmp	r4, #43	; 0x2b
 8004904:	bf08      	it	eq
 8004906:	f89e 4000 	ldrbeq.w	r4, [lr]
 800490a:	46a8      	mov	r8, r5
 800490c:	bf08      	it	eq
 800490e:	f106 0e02 	addeq.w	lr, r6, #2
 8004912:	e7c7      	b.n	80048a4 <_strtol_l.isra.0+0x3c>
 8004914:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004918:	2f19      	cmp	r7, #25
 800491a:	d801      	bhi.n	8004920 <_strtol_l.isra.0+0xb8>
 800491c:	3c37      	subs	r4, #55	; 0x37
 800491e:	e7e1      	b.n	80048e4 <_strtol_l.isra.0+0x7c>
 8004920:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004924:	2f19      	cmp	r7, #25
 8004926:	d804      	bhi.n	8004932 <_strtol_l.isra.0+0xca>
 8004928:	3c57      	subs	r4, #87	; 0x57
 800492a:	e7db      	b.n	80048e4 <_strtol_l.isra.0+0x7c>
 800492c:	f04f 36ff 	mov.w	r6, #4294967295
 8004930:	e7e4      	b.n	80048fc <_strtol_l.isra.0+0x94>
 8004932:	2e00      	cmp	r6, #0
 8004934:	da05      	bge.n	8004942 <_strtol_l.isra.0+0xda>
 8004936:	2322      	movs	r3, #34	; 0x22
 8004938:	6003      	str	r3, [r0, #0]
 800493a:	4665      	mov	r5, ip
 800493c:	b942      	cbnz	r2, 8004950 <_strtol_l.isra.0+0xe8>
 800493e:	4628      	mov	r0, r5
 8004940:	e79d      	b.n	800487e <_strtol_l.isra.0+0x16>
 8004942:	f1b8 0f00 	cmp.w	r8, #0
 8004946:	d000      	beq.n	800494a <_strtol_l.isra.0+0xe2>
 8004948:	426d      	negs	r5, r5
 800494a:	2a00      	cmp	r2, #0
 800494c:	d0f7      	beq.n	800493e <_strtol_l.isra.0+0xd6>
 800494e:	b10e      	cbz	r6, 8004954 <_strtol_l.isra.0+0xec>
 8004950:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004954:	6011      	str	r1, [r2, #0]
 8004956:	e7f2      	b.n	800493e <_strtol_l.isra.0+0xd6>
 8004958:	2430      	movs	r4, #48	; 0x30
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1b3      	bne.n	80048c6 <_strtol_l.isra.0+0x5e>
 800495e:	2308      	movs	r3, #8
 8004960:	e7b1      	b.n	80048c6 <_strtol_l.isra.0+0x5e>
 8004962:	2c30      	cmp	r4, #48	; 0x30
 8004964:	d0a4      	beq.n	80048b0 <_strtol_l.isra.0+0x48>
 8004966:	230a      	movs	r3, #10
 8004968:	e7ad      	b.n	80048c6 <_strtol_l.isra.0+0x5e>
 800496a:	bf00      	nop
 800496c:	08004b16 	.word	0x08004b16

08004970 <strtol>:
 8004970:	4613      	mov	r3, r2
 8004972:	460a      	mov	r2, r1
 8004974:	4601      	mov	r1, r0
 8004976:	4802      	ldr	r0, [pc, #8]	; (8004980 <strtol+0x10>)
 8004978:	6800      	ldr	r0, [r0, #0]
 800497a:	f7ff bf75 	b.w	8004868 <_strtol_l.isra.0>
 800497e:	bf00      	nop
 8004980:	200001c8 	.word	0x200001c8

08004984 <__utoa>:
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004986:	4c1f      	ldr	r4, [pc, #124]	; (8004a04 <__utoa+0x80>)
 8004988:	b08b      	sub	sp, #44	; 0x2c
 800498a:	4605      	mov	r5, r0
 800498c:	460b      	mov	r3, r1
 800498e:	466e      	mov	r6, sp
 8004990:	f104 0c20 	add.w	ip, r4, #32
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	6861      	ldr	r1, [r4, #4]
 8004998:	4637      	mov	r7, r6
 800499a:	c703      	stmia	r7!, {r0, r1}
 800499c:	3408      	adds	r4, #8
 800499e:	4564      	cmp	r4, ip
 80049a0:	463e      	mov	r6, r7
 80049a2:	d1f7      	bne.n	8004994 <__utoa+0x10>
 80049a4:	7921      	ldrb	r1, [r4, #4]
 80049a6:	7139      	strb	r1, [r7, #4]
 80049a8:	1e91      	subs	r1, r2, #2
 80049aa:	6820      	ldr	r0, [r4, #0]
 80049ac:	6038      	str	r0, [r7, #0]
 80049ae:	2922      	cmp	r1, #34	; 0x22
 80049b0:	f04f 0100 	mov.w	r1, #0
 80049b4:	d904      	bls.n	80049c0 <__utoa+0x3c>
 80049b6:	7019      	strb	r1, [r3, #0]
 80049b8:	460b      	mov	r3, r1
 80049ba:	4618      	mov	r0, r3
 80049bc:	b00b      	add	sp, #44	; 0x2c
 80049be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c0:	1e58      	subs	r0, r3, #1
 80049c2:	4684      	mov	ip, r0
 80049c4:	fbb5 f7f2 	udiv	r7, r5, r2
 80049c8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80049cc:	fb02 5617 	mls	r6, r2, r7, r5
 80049d0:	4476      	add	r6, lr
 80049d2:	460c      	mov	r4, r1
 80049d4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80049d8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80049dc:	462e      	mov	r6, r5
 80049de:	42b2      	cmp	r2, r6
 80049e0:	f101 0101 	add.w	r1, r1, #1
 80049e4:	463d      	mov	r5, r7
 80049e6:	d9ed      	bls.n	80049c4 <__utoa+0x40>
 80049e8:	2200      	movs	r2, #0
 80049ea:	545a      	strb	r2, [r3, r1]
 80049ec:	1919      	adds	r1, r3, r4
 80049ee:	1aa5      	subs	r5, r4, r2
 80049f0:	42aa      	cmp	r2, r5
 80049f2:	dae2      	bge.n	80049ba <__utoa+0x36>
 80049f4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80049f8:	780e      	ldrb	r6, [r1, #0]
 80049fa:	7006      	strb	r6, [r0, #0]
 80049fc:	3201      	adds	r2, #1
 80049fe:	f801 5901 	strb.w	r5, [r1], #-1
 8004a02:	e7f4      	b.n	80049ee <__utoa+0x6a>
 8004a04:	08004af0 	.word	0x08004af0

08004a08 <_init>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr

08004a14 <_fini>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	bf00      	nop
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr
