
uart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004074  08004074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004120  08004120  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08004120  08004120  00014120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004128  08004128  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08004130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000104  08004234  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004234  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf3c  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba0  00000000  00000000  0002c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002e5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a29  00000000  00000000  0002ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a71e  00000000  00000000  000548c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8648  00000000  00000000  0005efdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147627  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000264c  00000000  00000000  0014767c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000104 	.word	0x20000104
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800405c 	.word	0x0800405c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000108 	.word	0x20000108
 80001c4:	0800405c 	.word	0x0800405c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b96e 	b.w	80004d0 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	468c      	mov	ip, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	f040 8083 	bne.w	8000322 <__udivmoddi4+0x116>
 800021c:	428a      	cmp	r2, r1
 800021e:	4617      	mov	r7, r2
 8000220:	d947      	bls.n	80002b2 <__udivmoddi4+0xa6>
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	b142      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000228:	f1c2 0020 	rsb	r0, r2, #32
 800022c:	fa24 f000 	lsr.w	r0, r4, r0
 8000230:	4091      	lsls	r1, r2
 8000232:	4097      	lsls	r7, r2
 8000234:	ea40 0c01 	orr.w	ip, r0, r1
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbbc f6f8 	udiv	r6, ip, r8
 8000244:	fa1f fe87 	uxth.w	lr, r7
 8000248:	fb08 c116 	mls	r1, r8, r6, ip
 800024c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000250:	fb06 f10e 	mul.w	r1, r6, lr
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 8119 	bcs.w	8000494 <__udivmoddi4+0x288>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8116 	bls.w	8000494 <__udivmoddi4+0x288>
 8000268:	3e02      	subs	r6, #2
 800026a:	443b      	add	r3, r7
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000280:	45a6      	cmp	lr, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	193c      	adds	r4, r7, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8105 	bcs.w	8000498 <__udivmoddi4+0x28c>
 800028e:	45a6      	cmp	lr, r4
 8000290:	f240 8102 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029c:	eba4 040e 	sub.w	r4, r4, lr
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	b902      	cbnz	r2, 80002b6 <__udivmoddi4+0xaa>
 80002b4:	deff      	udf	#255	; 0xff
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d150      	bne.n	8000360 <__udivmoddi4+0x154>
 80002be:	1bcb      	subs	r3, r1, r7
 80002c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c4:	fa1f f887 	uxth.w	r8, r7
 80002c8:	2601      	movs	r6, #1
 80002ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ce:	0c21      	lsrs	r1, r4, #16
 80002d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d8:	fb08 f30c 	mul.w	r3, r8, ip
 80002dc:	428b      	cmp	r3, r1
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0xe4>
 80002e0:	1879      	adds	r1, r7, r1
 80002e2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0xe2>
 80002e8:	428b      	cmp	r3, r1
 80002ea:	f200 80e9 	bhi.w	80004c0 <__udivmoddi4+0x2b4>
 80002ee:	4684      	mov	ip, r0
 80002f0:	1ac9      	subs	r1, r1, r3
 80002f2:	b2a3      	uxth	r3, r4
 80002f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000300:	fb08 f800 	mul.w	r8, r8, r0
 8000304:	45a0      	cmp	r8, r4
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0x10c>
 8000308:	193c      	adds	r4, r7, r4
 800030a:	f100 33ff 	add.w	r3, r0, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x10a>
 8000310:	45a0      	cmp	r8, r4
 8000312:	f200 80d9 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 8000316:	4618      	mov	r0, r3
 8000318:	eba4 0408 	sub.w	r4, r4, r8
 800031c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000320:	e7bf      	b.n	80002a2 <__udivmoddi4+0x96>
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0x12e>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80b1 	beq.w	800048e <__udivmoddi4+0x282>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x1cc>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0x140>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80b8 	bhi.w	80004bc <__udivmoddi4+0x2b0>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0103 	sbc.w	r1, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	468c      	mov	ip, r1
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0a8      	beq.n	80002ac <__udivmoddi4+0xa0>
 800035a:	e9c5 4c00 	strd	r4, ip, [r5]
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0xa0>
 8000360:	f1c2 0320 	rsb	r3, r2, #32
 8000364:	fa20 f603 	lsr.w	r6, r0, r3
 8000368:	4097      	lsls	r7, r2
 800036a:	fa01 f002 	lsl.w	r0, r1, r2
 800036e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000372:	40d9      	lsrs	r1, r3
 8000374:	4330      	orrs	r0, r6
 8000376:	0c03      	lsrs	r3, r0, #16
 8000378:	fbb1 f6fe 	udiv	r6, r1, lr
 800037c:	fa1f f887 	uxth.w	r8, r7
 8000380:	fb0e 1116 	mls	r1, lr, r6, r1
 8000384:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000388:	fb06 f108 	mul.w	r1, r6, r8
 800038c:	4299      	cmp	r1, r3
 800038e:	fa04 f402 	lsl.w	r4, r4, r2
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x19c>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f106 3cff 	add.w	ip, r6, #4294967295
 800039a:	f080 808d 	bcs.w	80004b8 <__udivmoddi4+0x2ac>
 800039e:	4299      	cmp	r1, r3
 80003a0:	f240 808a 	bls.w	80004b8 <__udivmoddi4+0x2ac>
 80003a4:	3e02      	subs	r6, #2
 80003a6:	443b      	add	r3, r7
 80003a8:	1a5b      	subs	r3, r3, r1
 80003aa:	b281      	uxth	r1, r0
 80003ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b8:	fb00 f308 	mul.w	r3, r0, r8
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x1c4>
 80003c0:	1879      	adds	r1, r7, r1
 80003c2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c6:	d273      	bcs.n	80004b0 <__udivmoddi4+0x2a4>
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d971      	bls.n	80004b0 <__udivmoddi4+0x2a4>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4439      	add	r1, r7
 80003d0:	1acb      	subs	r3, r1, r3
 80003d2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d6:	e778      	b.n	80002ca <__udivmoddi4+0xbe>
 80003d8:	f1c6 0c20 	rsb	ip, r6, #32
 80003dc:	fa03 f406 	lsl.w	r4, r3, r6
 80003e0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e4:	431c      	orrs	r4, r3
 80003e6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f6:	431f      	orrs	r7, r3
 80003f8:	0c3b      	lsrs	r3, r7, #16
 80003fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fe:	fa1f f884 	uxth.w	r8, r4
 8000402:	fb0e 1119 	mls	r1, lr, r9, r1
 8000406:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040a:	fb09 fa08 	mul.w	sl, r9, r8
 800040e:	458a      	cmp	sl, r1
 8000410:	fa02 f206 	lsl.w	r2, r2, r6
 8000414:	fa00 f306 	lsl.w	r3, r0, r6
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x220>
 800041a:	1861      	adds	r1, r4, r1
 800041c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000420:	d248      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000422:	458a      	cmp	sl, r1
 8000424:	d946      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 8000426:	f1a9 0902 	sub.w	r9, r9, #2
 800042a:	4421      	add	r1, r4
 800042c:	eba1 010a 	sub.w	r1, r1, sl
 8000430:	b2bf      	uxth	r7, r7
 8000432:	fbb1 f0fe 	udiv	r0, r1, lr
 8000436:	fb0e 1110 	mls	r1, lr, r0, r1
 800043a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043e:	fb00 f808 	mul.w	r8, r0, r8
 8000442:	45b8      	cmp	r8, r7
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x24a>
 8000446:	19e7      	adds	r7, r4, r7
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d22e      	bcs.n	80004ac <__udivmoddi4+0x2a0>
 800044e:	45b8      	cmp	r8, r7
 8000450:	d92c      	bls.n	80004ac <__udivmoddi4+0x2a0>
 8000452:	3802      	subs	r0, #2
 8000454:	4427      	add	r7, r4
 8000456:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045a:	eba7 0708 	sub.w	r7, r7, r8
 800045e:	fba0 8902 	umull	r8, r9, r0, r2
 8000462:	454f      	cmp	r7, r9
 8000464:	46c6      	mov	lr, r8
 8000466:	4649      	mov	r1, r9
 8000468:	d31a      	bcc.n	80004a0 <__udivmoddi4+0x294>
 800046a:	d017      	beq.n	800049c <__udivmoddi4+0x290>
 800046c:	b15d      	cbz	r5, 8000486 <__udivmoddi4+0x27a>
 800046e:	ebb3 020e 	subs.w	r2, r3, lr
 8000472:	eb67 0701 	sbc.w	r7, r7, r1
 8000476:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047a:	40f2      	lsrs	r2, r6
 800047c:	ea4c 0202 	orr.w	r2, ip, r2
 8000480:	40f7      	lsrs	r7, r6
 8000482:	e9c5 2700 	strd	r2, r7, [r5]
 8000486:	2600      	movs	r6, #0
 8000488:	4631      	mov	r1, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e70b      	b.n	80002ac <__udivmoddi4+0xa0>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e9      	b.n	800026c <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fd      	b.n	8000298 <__udivmoddi4+0x8c>
 800049c:	4543      	cmp	r3, r8
 800049e:	d2e5      	bcs.n	800046c <__udivmoddi4+0x260>
 80004a0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a4:	eb69 0104 	sbc.w	r1, r9, r4
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7df      	b.n	800046c <__udivmoddi4+0x260>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e7d2      	b.n	8000456 <__udivmoddi4+0x24a>
 80004b0:	4660      	mov	r0, ip
 80004b2:	e78d      	b.n	80003d0 <__udivmoddi4+0x1c4>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e7b9      	b.n	800042c <__udivmoddi4+0x220>
 80004b8:	4666      	mov	r6, ip
 80004ba:	e775      	b.n	80003a8 <__udivmoddi4+0x19c>
 80004bc:	4630      	mov	r0, r6
 80004be:	e74a      	b.n	8000356 <__udivmoddi4+0x14a>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	4439      	add	r1, r7
 80004c6:	e713      	b.n	80002f0 <__udivmoddi4+0xe4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	443c      	add	r4, r7
 80004cc:	e724      	b.n	8000318 <__udivmoddi4+0x10c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_UARTEx_RxEventCallback>:
uint8_t toggle_command[main_buff_size]="toggle";
uint8_t help_command[main_buff_size]="help";


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART2)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a3c      	ldr	r2, [pc, #240]	; (80005d8 <HAL_UARTEx_RxEventCallback+0x104>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d172      	bne.n	80005d0 <HAL_UARTEx_RxEventCallback+0xfc>
	{
			memcpy(main_buffer,rx_buffer,rx_buff_size);
 80004ea:	4b3c      	ldr	r3, [pc, #240]	; (80005dc <HAL_UARTEx_RxEventCallback+0x108>)
 80004ec:	4a3c      	ldr	r2, [pc, #240]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x10c>)
 80004ee:	6810      	ldr	r0, [r2, #0]
 80004f0:	6851      	ldr	r1, [r2, #4]
 80004f2:	6018      	str	r0, [r3, #0]
 80004f4:	6059      	str	r1, [r3, #4]
 80004f6:	8912      	ldrh	r2, [r2, #8]
 80004f8:	811a      	strh	r2, [r3, #8]
			memset(rx_buffer, '\0', rx_buff_size*sizeof(uint8_t));
 80004fa:	220a      	movs	r2, #10
 80004fc:	2100      	movs	r1, #0
 80004fe:	4838      	ldr	r0, [pc, #224]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000500:	f003 fda4 	bl	800404c <memset>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) rx_buffer, rx_buff_size);
 8000504:	220a      	movs	r2, #10
 8000506:	4936      	ldr	r1, [pc, #216]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000508:	4836      	ldr	r0, [pc, #216]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x110>)
 800050a:	f003 fd34 	bl	8003f76 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800050e:	4b36      	ldr	r3, [pc, #216]	; (80005e8 <HAL_UARTEx_RxEventCallback+0x114>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b34      	ldr	r3, [pc, #208]	; (80005e8 <HAL_UARTEx_RxEventCallback+0x114>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f022 0204 	bic.w	r2, r2, #4
 800051c:	601a      	str	r2, [r3, #0]


			HAL_UART_Transmit(&huart2, "Received data: ", 15, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	220f      	movs	r2, #15
 8000522:	4932      	ldr	r1, [pc, #200]	; (80005ec <HAL_UARTEx_RxEventCallback+0x118>)
 8000524:	482f      	ldr	r0, [pc, #188]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x110>)
 8000526:	f002 fc13 	bl	8002d50 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, main_buffer, Size, 100);
 800052a:	887a      	ldrh	r2, [r7, #2]
 800052c:	2364      	movs	r3, #100	; 0x64
 800052e:	492b      	ldr	r1, [pc, #172]	; (80005dc <HAL_UARTEx_RxEventCallback+0x108>)
 8000530:	482c      	ldr	r0, [pc, #176]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x110>)
 8000532:	f002 fc0d 	bl	8002d50 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "\n", 1, 100);
 8000536:	2364      	movs	r3, #100	; 0x64
 8000538:	2201      	movs	r2, #1
 800053a:	492d      	ldr	r1, [pc, #180]	; (80005f0 <HAL_UARTEx_RxEventCallback+0x11c>)
 800053c:	4829      	ldr	r0, [pc, #164]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x110>)
 800053e:	f002 fc07 	bl	8002d50 <HAL_UART_Transmit>
			if(strcmp(main_buffer,on_command)==0)
 8000542:	492c      	ldr	r1, [pc, #176]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x120>)
 8000544:	4825      	ldr	r0, [pc, #148]	; (80005dc <HAL_UARTEx_RxEventCallback+0x108>)
 8000546:	f7ff fe3f 	bl	80001c8 <strcmp>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d10a      	bne.n	8000566 <HAL_UARTEx_RxEventCallback+0x92>
			{
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	2120      	movs	r1, #32
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f001 f86e 	bl	8001638 <HAL_GPIO_WritePin>
				 HAL_UART_Transmit_IT(&huart2, "\r\nLED turned on\r\n", 20);
 800055c:	2214      	movs	r2, #20
 800055e:	4926      	ldr	r1, [pc, #152]	; (80005f8 <HAL_UARTEx_RxEventCallback+0x124>)
 8000560:	4820      	ldr	r0, [pc, #128]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x110>)
 8000562:	f002 fc89 	bl	8002e78 <HAL_UART_Transmit_IT>

			}
			if(strcmp(main_buffer,off_command)==0)
 8000566:	4925      	ldr	r1, [pc, #148]	; (80005fc <HAL_UARTEx_RxEventCallback+0x128>)
 8000568:	481c      	ldr	r0, [pc, #112]	; (80005dc <HAL_UARTEx_RxEventCallback+0x108>)
 800056a:	f7ff fe2d 	bl	80001c8 <strcmp>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d10a      	bne.n	800058a <HAL_UARTEx_RxEventCallback+0xb6>
			{
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2120      	movs	r1, #32
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f001 f85c 	bl	8001638 <HAL_GPIO_WritePin>
				 HAL_UART_Transmit_IT(&huart2, "\r\nLED turned off\r\n", 20);
 8000580:	2214      	movs	r2, #20
 8000582:	491f      	ldr	r1, [pc, #124]	; (8000600 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000584:	4817      	ldr	r0, [pc, #92]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x110>)
 8000586:	f002 fc77 	bl	8002e78 <HAL_UART_Transmit_IT>

			}
			if(strcmp(main_buffer,toggle_command)==0)
 800058a:	491e      	ldr	r1, [pc, #120]	; (8000604 <HAL_UARTEx_RxEventCallback+0x130>)
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <HAL_UARTEx_RxEventCallback+0x108>)
 800058e:	f7ff fe1b 	bl	80001c8 <strcmp>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d109      	bne.n	80005ac <HAL_UARTEx_RxEventCallback+0xd8>
			{

				 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000598:	2120      	movs	r1, #32
 800059a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059e:	f001 f863 	bl	8001668 <HAL_GPIO_TogglePin>
			     HAL_UART_Transmit_IT(&huart2, "\r\nLED Toggled\\r\n", 20);
 80005a2:	2214      	movs	r2, #20
 80005a4:	4918      	ldr	r1, [pc, #96]	; (8000608 <HAL_UARTEx_RxEventCallback+0x134>)
 80005a6:	480f      	ldr	r0, [pc, #60]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x110>)
 80005a8:	f002 fc66 	bl	8002e78 <HAL_UART_Transmit_IT>
			}
			if(strcmp(main_buffer,help_command)==0)
 80005ac:	4917      	ldr	r1, [pc, #92]	; (800060c <HAL_UARTEx_RxEventCallback+0x138>)
 80005ae:	480b      	ldr	r0, [pc, #44]	; (80005dc <HAL_UARTEx_RxEventCallback+0x108>)
 80005b0:	f7ff fe0a 	bl	80001c8 <strcmp>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d105      	bne.n	80005c6 <HAL_UARTEx_RxEventCallback+0xf2>
			{

				 HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 80005ba:	22c8      	movs	r2, #200	; 0xc8
 80005bc:	4914      	ldr	r1, [pc, #80]	; (8000610 <HAL_UARTEx_RxEventCallback+0x13c>)
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x110>)
 80005c0:	f002 fc5a 	bl	8002e78 <HAL_UART_Transmit_IT>
			{
				HAL_UART_Transmit_IT(&huart2, "\r\nUnknown Command\r\n", 20);
			}

		}
}
 80005c4:	e004      	b.n	80005d0 <HAL_UARTEx_RxEventCallback+0xfc>
				HAL_UART_Transmit_IT(&huart2, "\r\nUnknown Command\r\n", 20);
 80005c6:	2214      	movs	r2, #20
 80005c8:	4912      	ldr	r1, [pc, #72]	; (8000614 <HAL_UARTEx_RxEventCallback+0x140>)
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x110>)
 80005cc:	f002 fc54 	bl	8002e78 <HAL_UART_Transmit_IT>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40004400 	.word	0x40004400
 80005dc:	200001f8 	.word	0x200001f8
 80005e0:	20000168 	.word	0x20000168
 80005e4:	20000174 	.word	0x20000174
 80005e8:	20000120 	.word	0x20000120
 80005ec:	08004074 	.word	0x08004074
 80005f0:	08004084 	.word	0x08004084
 80005f4:	200000c8 	.word	0x200000c8
 80005f8:	08004088 	.word	0x08004088
 80005fc:	200000d4 	.word	0x200000d4
 8000600:	0800409c 	.word	0x0800409c
 8000604:	200000e0 	.word	0x200000e0
 8000608:	080040b0 	.word	0x080040b0
 800060c:	200000ec 	.word	0x200000ec
 8000610:	20000000 	.word	0x20000000
 8000614:	080040c4 	.word	0x080040c4

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fa5e 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f82c 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f8ee 	bl	8000804 <MX_GPIO_Init>
  MX_DMA_Init();
 8000628:	f000 f8ce 	bl	80007c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f89c 	bl	8000768 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8000630:	22c8      	movs	r2, #200	; 0xc8
 8000632:	490d      	ldr	r1, [pc, #52]	; (8000668 <main+0x50>)
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <main+0x54>)
 8000636:	f002 fc1f 	bl	8002e78 <HAL_UART_Transmit_IT>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, rx_buff_size);
 800063a:	220a      	movs	r2, #10
 800063c:	490c      	ldr	r1, [pc, #48]	; (8000670 <main+0x58>)
 800063e:	480b      	ldr	r0, [pc, #44]	; (800066c <main+0x54>)
 8000640:	f003 fc99 	bl	8003f76 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <main+0x5c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <main+0x5c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f022 0204 	bic.w	r2, r2, #4
 8000652:	601a      	str	r2, [r3, #0]
  memcpy(main_buffer,rx_buffer,rx_buff_size);
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <main+0x60>)
 8000656:	4a06      	ldr	r2, [pc, #24]	; (8000670 <main+0x58>)
 8000658:	6810      	ldr	r0, [r2, #0]
 800065a:	6851      	ldr	r1, [r2, #4]
 800065c:	6018      	str	r0, [r3, #0]
 800065e:	6059      	str	r1, [r3, #4]
 8000660:	8912      	ldrh	r2, [r2, #8]
 8000662:	811a      	strh	r2, [r3, #8]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x4c>
 8000666:	bf00      	nop
 8000668:	20000000 	.word	0x20000000
 800066c:	20000174 	.word	0x20000174
 8000670:	20000168 	.word	0x20000168
 8000674:	20000120 	.word	0x20000120
 8000678:	200001f8 	.word	0x200001f8

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0b8      	sub	sp, #224	; 0xe0
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000686:	2244      	movs	r2, #68	; 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fcde 	bl	800404c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2288      	movs	r2, #136	; 0x88
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fcd0 	bl	800404c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006d2:	230a      	movs	r3, #10
 80006d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d8:	2307      	movs	r3, #7
 80006da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f838 	bl	8001764 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006fa:	f000 f8b3 	bl	8000864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2303      	movs	r3, #3
 8000706:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000720:	2104      	movs	r1, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fc04 	bl	8001f30 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800072e:	f000 f899 	bl	8000864 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000732:	2302      	movs	r3, #2
 8000734:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000736:	2300      	movs	r3, #0
 8000738:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fdfd 	bl	800233c <HAL_RCCEx_PeriphCLKConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000748:	f000 f88c 	bl	8000864 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800074c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000750:	f000 ffb2 	bl	80016b8 <HAL_PWREx_ControlVoltageScaling>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800075a:	f000 f883 	bl	8000864 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	37e0      	adds	r7, #224	; 0xe0
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800076e:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <MX_USART2_UART_Init+0x5c>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007ac:	f002 fa82 	bl	8002cb4 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f855 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000174 	.word	0x20000174
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_DMA_Init+0x38>)
 80007d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <MX_DMA_Init+0x38>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6493      	str	r3, [r2, #72]	; 0x48
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_DMA_Init+0x38>)
 80007dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2010      	movs	r0, #16
 80007ec:	f000 facd 	bl	8000d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007f0:	2010      	movs	r0, #16
 80007f2:	f000 fae6 	bl	8000dc2 <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_GPIO_Init+0x5c>)
 800081a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <MX_GPIO_Init+0x5c>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_GPIO_Init+0x5c>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2120      	movs	r1, #32
 8000834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000838:	f000 fefe 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800083c:	2320      	movs	r3, #32
 800083e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f000 fd46 	bl	80012e4 <HAL_GPIO_Init>

}
 8000858:	bf00      	nop
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <HAL_MspInit+0x44>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6613      	str	r3, [r2, #96]	; 0x60
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_MspInit+0x44>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6593      	str	r3, [r2, #88]	; 0x58
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a30      	ldr	r2, [pc, #192]	; (8000998 <HAL_UART_MspInit+0xe0>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d159      	bne.n	800098e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <HAL_UART_MspInit+0xe4>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <HAL_UART_MspInit+0xe4>)
 80008e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e4:	6593      	str	r3, [r2, #88]	; 0x58
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_UART_MspInit+0xe4>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <HAL_UART_MspInit+0xe4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a29      	ldr	r2, [pc, #164]	; (800099c <HAL_UART_MspInit+0xe4>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <HAL_UART_MspInit+0xe4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800090a:	230c      	movs	r3, #12
 800090c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800091a:	2307      	movs	r3, #7
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f000 fcdc 	bl	80012e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 800092e:	4a1d      	ldr	r2, [pc, #116]	; (80009a4 <HAL_UART_MspInit+0xec>)
 8000930:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000934:	2202      	movs	r2, #2
 8000936:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000962:	480f      	ldr	r0, [pc, #60]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000964:	f000 fa48 	bl	8000df8 <HAL_DMA_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 800096e:	f7ff ff79 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 8000976:	671a      	str	r2, [r3, #112]	; 0x70
 8000978:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <HAL_UART_MspInit+0xe8>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2026      	movs	r0, #38	; 0x26
 8000984:	f000 fa01 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000988:	2026      	movs	r0, #38	; 0x26
 800098a:	f000 fa1a 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40004400 	.word	0x40004400
 800099c:	40021000 	.word	0x40021000
 80009a0:	20000120 	.word	0x20000120
 80009a4:	4002006c 	.word	0x4002006c

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f8ce 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <DMA1_Channel6_IRQHandler+0x10>)
 8000a02:	f000 fb90 	bl	8001126 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000120 	.word	0x20000120

08000a10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USART2_IRQHandler+0x10>)
 8000a16:	f002 fa8b 	bl	8002f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000174 	.word	0x20000174

08000a24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <SystemInit+0x5c>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <SystemInit+0x5c>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <SystemInit+0x60>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <SystemInit+0x60>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <SystemInit+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <SystemInit+0x60>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <SystemInit+0x60>)
 8000a50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <SystemInit+0x60>)
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <SystemInit+0x60>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <SystemInit+0x60>)
 8000a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <SystemInit+0x60>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00
 8000a84:	40021000 	.word	0x40021000

08000a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a8c:	f7ff ffca 	bl	8000a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a92:	e003      	b.n	8000a9c <LoopCopyDataInit>

08000a94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a9a:	3104      	adds	r1, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a9c:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000aa0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000aa2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000aa4:	d3f6      	bcc.n	8000a94 <CopyDataInit>
	ldr	r2, =_sbss
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000aa8:	e002      	b.n	8000ab0 <LoopFillZerobss>

08000aaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000aaa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000aac:	f842 3b04 	str.w	r3, [r2], #4

08000ab0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <LoopForever+0x16>)
	cmp	r2, r3
 8000ab2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ab4:	d3f9      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f003 faa5 	bl	8004004 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aba:	f7ff fdad 	bl	8000618 <main>

08000abe <LoopForever>:

LoopForever:
    b LoopForever
 8000abe:	e7fe      	b.n	8000abe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ac4:	08004130 	.word	0x08004130
	ldr	r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000acc:	20000104 	.word	0x20000104
	ldr	r2, =_sbss
 8000ad0:	20000104 	.word	0x20000104
	ldr	r3, = _ebss
 8000ad4:	20000208 	.word	0x20000208

08000ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC1_2_IRQHandler>
	...

08000adc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_Init+0x3c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <HAL_Init+0x3c>)
 8000aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af2:	2003      	movs	r0, #3
 8000af4:	f000 f93e 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f000 f80f 	bl	8000b1c <HAL_InitTick>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	e001      	b.n	8000b0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b0a:	f7ff feb1 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40022000 	.word	0x40022000

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_InitTick+0x6c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d023      	beq.n	8000b78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_InitTick+0x70>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_InitTick+0x6c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f949 	bl	8000dde <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10f      	bne.n	8000b72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d809      	bhi.n	8000b6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f913 	bl	8000d8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b64:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_InitTick+0x74>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e007      	b.n	8000b7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e004      	b.n	8000b7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
 8000b76:	e001      	b.n	8000b7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000100 	.word	0x20000100
 8000b8c:	200000f8 	.word	0x200000f8
 8000b90:	200000fc 	.word	0x200000fc

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000100 	.word	0x20000100
 8000bb8:	20000204 	.word	0x20000204

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000204 	.word	0x20000204

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff29 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff3e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff31 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa2 	bl	8000d30 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e098      	b.n	8000f3c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b4d      	ldr	r3, [pc, #308]	; (8000f48 <HAL_DMA_Init+0x150>)
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d80f      	bhi.n	8000e36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b4b      	ldr	r3, [pc, #300]	; (8000f4c <HAL_DMA_Init+0x154>)
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a4b      	ldr	r2, [pc, #300]	; (8000f50 <HAL_DMA_Init+0x158>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	009a      	lsls	r2, r3, #2
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_DMA_Init+0x15c>)
 8000e32:	641a      	str	r2, [r3, #64]	; 0x40
 8000e34:	e00e      	b.n	8000e54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b46      	ldr	r3, [pc, #280]	; (8000f58 <HAL_DMA_Init+0x160>)
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a43      	ldr	r2, [pc, #268]	; (8000f50 <HAL_DMA_Init+0x158>)
 8000e42:	fba2 2303 	umull	r2, r3, r2, r3
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	009a      	lsls	r2, r3, #2
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a42      	ldr	r2, [pc, #264]	; (8000f5c <HAL_DMA_Init+0x164>)
 8000e52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2202      	movs	r2, #2
 8000e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000eae:	d039      	beq.n	8000f24 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <HAL_DMA_Init+0x15c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d11a      	bne.n	8000ef0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <HAL_DMA_Init+0x168>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f003 031c 	and.w	r3, r3, #28
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	4924      	ldr	r1, [pc, #144]	; (8000f60 <HAL_DMA_Init+0x168>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <HAL_DMA_Init+0x168>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6859      	ldr	r1, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	f003 031c 	and.w	r3, r3, #28
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	491d      	ldr	r1, [pc, #116]	; (8000f60 <HAL_DMA_Init+0x168>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	600b      	str	r3, [r1, #0]
 8000eee:	e019      	b.n	8000f24 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_DMA_Init+0x16c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef8:	f003 031c 	and.w	r3, r3, #28
 8000efc:	210f      	movs	r1, #15
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4917      	ldr	r1, [pc, #92]	; (8000f64 <HAL_DMA_Init+0x16c>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_DMA_Init+0x16c>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6859      	ldr	r1, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f003 031c 	and.w	r3, r3, #28
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	4911      	ldr	r1, [pc, #68]	; (8000f64 <HAL_DMA_Init+0x16c>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	40020407 	.word	0x40020407
 8000f4c:	bffdfff8 	.word	0xbffdfff8
 8000f50:	cccccccd 	.word	0xcccccccd
 8000f54:	40020000 	.word	0x40020000
 8000f58:	bffdfbf8 	.word	0xbffdfbf8
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	400200a8 	.word	0x400200a8
 8000f64:	400204a8 	.word	0x400204a8

08000f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d101      	bne.n	8000f88 <HAL_DMA_Start_IT+0x20>
 8000f84:	2302      	movs	r3, #2
 8000f86:	e04b      	b.n	8001020 <HAL_DMA_Start_IT+0xb8>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d13a      	bne.n	8001012 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f000 f95f 	bl	8001284 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d008      	beq.n	8000fe0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 020e 	orr.w	r2, r2, #14
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e00f      	b.n	8001000 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0204 	bic.w	r2, r2, #4
 8000fee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 020a 	orr.w	r2, r2, #10
 8000ffe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e005      	b.n	800101e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800101a:	2302      	movs	r3, #2
 800101c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800101e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d008      	beq.n	8001052 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2204      	movs	r2, #4
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e022      	b.n	8001098 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 020e 	bic.w	r2, r2, #14
 8001060:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0201 	bic.w	r2, r2, #1
 8001070:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f003 021c 	and.w	r2, r3, #28
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d005      	beq.n	80010c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2204      	movs	r2, #4
 80010c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e029      	b.n	800111c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 020e 	bic.w	r2, r2, #14
 80010d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ec:	f003 021c 	and.w	r2, r3, #28
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	2101      	movs	r1, #1
 80010f6:	fa01 f202 	lsl.w	r2, r1, r2
 80010fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	4798      	blx	r3
    }
  }
  return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f003 031c 	and.w	r3, r3, #28
 8001146:	2204      	movs	r2, #4
 8001148:	409a      	lsls	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d026      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x7a>
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d021      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	2b00      	cmp	r3, #0
 8001168:	d107      	bne.n	800117a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0204 	bic.w	r2, r2, #4
 8001178:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f003 021c 	and.w	r2, r3, #28
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	2104      	movs	r1, #4
 8001188:	fa01 f202 	lsl.w	r2, r1, r2
 800118c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	2b00      	cmp	r3, #0
 8001194:	d071      	beq.n	800127a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800119e:	e06c      	b.n	800127a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	f003 031c 	and.w	r3, r3, #28
 80011a8:	2202      	movs	r2, #2
 80011aa:	409a      	lsls	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d02e      	beq.n	8001212 <HAL_DMA_IRQHandler+0xec>
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d029      	beq.n	8001212 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0320 	and.w	r3, r3, #32
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10b      	bne.n	80011e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 020a 	bic.w	r2, r2, #10
 80011da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f003 021c 	and.w	r2, r3, #28
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	2102      	movs	r1, #2
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	2b00      	cmp	r3, #0
 8001206:	d038      	beq.n	800127a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001210:	e033      	b.n	800127a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f003 031c 	and.w	r3, r3, #28
 800121a:	2208      	movs	r2, #8
 800121c:	409a      	lsls	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4013      	ands	r3, r2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d02a      	beq.n	800127c <HAL_DMA_IRQHandler+0x156>
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d025      	beq.n	800127c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 020e 	bic.w	r2, r2, #14
 800123e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f003 021c 	and.w	r2, r3, #28
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	2101      	movs	r1, #1
 800124e:	fa01 f202 	lsl.w	r2, r1, r2
 8001252:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800127a:	bf00      	nop
 800127c:	bf00      	nop
}
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f003 021c 	and.w	r2, r3, #28
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b10      	cmp	r3, #16
 80012b4:	d108      	bne.n	80012c8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012c6:	e007      	b.n	80012d8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	60da      	str	r2, [r3, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f2:	e17f      	b.n	80015f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2101      	movs	r1, #1
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8171 	beq.w	80015ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d00b      	beq.n	800132c <HAL_GPIO_Init+0x48>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001320:	2b11      	cmp	r3, #17
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b12      	cmp	r3, #18
 800132a:	d130      	bne.n	800138e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001362:	2201      	movs	r2, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	f003 0201 	and.w	r2, r3, #1
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	2b03      	cmp	r3, #3
 8001398:	d118      	bne.n	80013cc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013a0:	2201      	movs	r2, #1
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	f003 0201 	and.w	r2, r3, #1
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x128>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b12      	cmp	r3, #18
 800140a:	d123      	bne.n	8001454 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	08da      	lsrs	r2, r3, #3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3208      	adds	r2, #8
 8001414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	220f      	movs	r2, #15
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	08da      	lsrs	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3208      	adds	r2, #8
 800144e:	6939      	ldr	r1, [r7, #16]
 8001450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0203 	and.w	r2, r3, #3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80ac 	beq.w	80015ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <HAL_GPIO_Init+0x330>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	4a5e      	ldr	r2, [pc, #376]	; (8001614 <HAL_GPIO_Init+0x330>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6613      	str	r3, [r2, #96]	; 0x60
 80014a2:	4b5c      	ldr	r3, [pc, #368]	; (8001614 <HAL_GPIO_Init+0x330>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014ae:	4a5a      	ldr	r2, [pc, #360]	; (8001618 <HAL_GPIO_Init+0x334>)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	220f      	movs	r2, #15
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014d8:	d025      	beq.n	8001526 <HAL_GPIO_Init+0x242>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4f      	ldr	r2, [pc, #316]	; (800161c <HAL_GPIO_Init+0x338>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d01f      	beq.n	8001522 <HAL_GPIO_Init+0x23e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4e      	ldr	r2, [pc, #312]	; (8001620 <HAL_GPIO_Init+0x33c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d019      	beq.n	800151e <HAL_GPIO_Init+0x23a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4d      	ldr	r2, [pc, #308]	; (8001624 <HAL_GPIO_Init+0x340>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_GPIO_Init+0x236>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4c      	ldr	r2, [pc, #304]	; (8001628 <HAL_GPIO_Init+0x344>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00d      	beq.n	8001516 <HAL_GPIO_Init+0x232>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4b      	ldr	r2, [pc, #300]	; (800162c <HAL_GPIO_Init+0x348>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d007      	beq.n	8001512 <HAL_GPIO_Init+0x22e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4a      	ldr	r2, [pc, #296]	; (8001630 <HAL_GPIO_Init+0x34c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d101      	bne.n	800150e <HAL_GPIO_Init+0x22a>
 800150a:	2306      	movs	r3, #6
 800150c:	e00c      	b.n	8001528 <HAL_GPIO_Init+0x244>
 800150e:	2307      	movs	r3, #7
 8001510:	e00a      	b.n	8001528 <HAL_GPIO_Init+0x244>
 8001512:	2305      	movs	r3, #5
 8001514:	e008      	b.n	8001528 <HAL_GPIO_Init+0x244>
 8001516:	2304      	movs	r3, #4
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x244>
 800151a:	2303      	movs	r3, #3
 800151c:	e004      	b.n	8001528 <HAL_GPIO_Init+0x244>
 800151e:	2302      	movs	r3, #2
 8001520:	e002      	b.n	8001528 <HAL_GPIO_Init+0x244>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x244>
 8001526:	2300      	movs	r3, #0
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	f002 0203 	and.w	r2, r2, #3
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001538:	4937      	ldr	r1, [pc, #220]	; (8001618 <HAL_GPIO_Init+0x334>)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <HAL_GPIO_Init+0x350>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800156a:	4a32      	ldr	r2, [pc, #200]	; (8001634 <HAL_GPIO_Init+0x350>)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001570:	4b30      	ldr	r3, [pc, #192]	; (8001634 <HAL_GPIO_Init+0x350>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001594:	4a27      	ldr	r2, [pc, #156]	; (8001634 <HAL_GPIO_Init+0x350>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_GPIO_Init+0x350>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015be:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <HAL_GPIO_Init+0x350>)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_GPIO_Init+0x350>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e8:	4a12      	ldr	r2, [pc, #72]	; (8001634 <HAL_GPIO_Init+0x350>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa22 f303 	lsr.w	r3, r2, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f47f ae78 	bne.w	80012f4 <HAL_GPIO_Init+0x10>
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000
 800161c:	48000400 	.word	0x48000400
 8001620:	48000800 	.word	0x48000800
 8001624:	48000c00 	.word	0x48000c00
 8001628:	48001000 	.word	0x48001000
 800162c:	48001400 	.word	0x48001400
 8001630:	48001800 	.word	0x48001800
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001654:	e002      	b.n	800165c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4013      	ands	r3, r2
 8001680:	041a      	lsls	r2, r3, #16
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43d9      	mvns	r1, r3
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	400b      	ands	r3, r1
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40007000 	.word	0x40007000

080016b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016c6:	d130      	bne.n	800172a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d4:	d038      	beq.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016de:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2232      	movs	r2, #50	; 0x32
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
 80016f0:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9b      	lsrs	r3, r3, #18
 80016f8:	3301      	adds	r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016fc:	e002      	b.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3b01      	subs	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001710:	d102      	bne.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f2      	bne.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001724:	d110      	bne.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e00f      	b.n	800174a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001736:	d007      	beq.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001746:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40007000 	.word	0x40007000
 800175c:	200000f8 	.word	0x200000f8
 8001760:	431bde83 	.word	0x431bde83

08001764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e3d4      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001776:	4ba1      	ldr	r3, [pc, #644]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001780:	4b9e      	ldr	r3, [pc, #632]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 80e4 	beq.w	8001960 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <HAL_RCC_OscConfig+0x4a>
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	f040 808b 	bne.w	80018bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	f040 8087 	bne.w	80018bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ae:	4b93      	ldr	r3, [pc, #588]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <HAL_RCC_OscConfig+0x62>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e3ac      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1a      	ldr	r2, [r3, #32]
 80017ca:	4b8c      	ldr	r3, [pc, #560]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <HAL_RCC_OscConfig+0x7c>
 80017d6:	4b89      	ldr	r3, [pc, #548]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017de:	e005      	b.n	80017ec <HAL_RCC_OscConfig+0x88>
 80017e0:	4b86      	ldr	r3, [pc, #536]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80017e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d223      	bcs.n	8001838 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fd41 	bl	800227c <RCC_SetFlashLatencyFromMSIRange>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e38d      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001804:	4b7d      	ldr	r3, [pc, #500]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a7c      	ldr	r2, [pc, #496]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b7a      	ldr	r3, [pc, #488]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4977      	ldr	r1, [pc, #476]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001822:	4b76      	ldr	r3, [pc, #472]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	4972      	ldr	r1, [pc, #456]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
 8001836:	e025      	b.n	8001884 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001838:	4b70      	ldr	r3, [pc, #448]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6f      	ldr	r2, [pc, #444]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b6d      	ldr	r3, [pc, #436]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	496a      	ldr	r1, [pc, #424]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001856:	4b69      	ldr	r3, [pc, #420]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	4965      	ldr	r1, [pc, #404]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4618      	mov	r0, r3
 8001876:	f000 fd01 	bl	800227c <RCC_SetFlashLatencyFromMSIRange>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e34d      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001884:	f000 fc36 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 8001888:	4602      	mov	r2, r0
 800188a:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	495a      	ldr	r1, [pc, #360]	; (8001a00 <HAL_RCC_OscConfig+0x29c>)
 8001896:	5ccb      	ldrb	r3, [r1, r3]
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <HAL_RCC_OscConfig+0x2a0>)
 80018a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018a4:	4b58      	ldr	r3, [pc, #352]	; (8001a08 <HAL_RCC_OscConfig+0x2a4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff f937 	bl	8000b1c <HAL_InitTick>
 80018ae:	4603      	mov	r3, r0
 80018b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d052      	beq.n	800195e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	e331      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d032      	beq.n	800192a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018c4:	4b4d      	ldr	r3, [pc, #308]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f974 	bl	8000bbc <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d8:	f7ff f970 	bl	8000bbc <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e31a      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ea:	4b44      	ldr	r3, [pc, #272]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a40      	ldr	r2, [pc, #256]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80018fc:	f043 0308 	orr.w	r3, r3, #8
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	493b      	ldr	r1, [pc, #236]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001914:	4b39      	ldr	r3, [pc, #228]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	4936      	ldr	r1, [pc, #216]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
 8001928:	e01a      	b.n	8001960 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800192a:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a33      	ldr	r2, [pc, #204]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001936:	f7ff f941 	bl	8000bbc <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800193e:	f7ff f93d 	bl	8000bbc <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e2e7      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f0      	bne.n	800193e <HAL_RCC_OscConfig+0x1da>
 800195c:	e000      	b.n	8001960 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800195e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d074      	beq.n	8001a56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b08      	cmp	r3, #8
 8001970:	d005      	beq.n	800197e <HAL_RCC_OscConfig+0x21a>
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	2b0c      	cmp	r3, #12
 8001976:	d10e      	bne.n	8001996 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d10b      	bne.n	8001996 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d064      	beq.n	8001a54 <HAL_RCC_OscConfig+0x2f0>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d160      	bne.n	8001a54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e2c4      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x24a>
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a15      	ldr	r2, [pc, #84]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80019a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	e01d      	b.n	80019ea <HAL_RCC_OscConfig+0x286>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b6:	d10c      	bne.n	80019d2 <HAL_RCC_OscConfig+0x26e>
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80019be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80019ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e00b      	b.n	80019ea <HAL_RCC_OscConfig+0x286>
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80019d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_RCC_OscConfig+0x298>)
 80019e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d01c      	beq.n	8001a2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff f8e3 	bl	8000bbc <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f8:	e011      	b.n	8001a1e <HAL_RCC_OscConfig+0x2ba>
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	080040d8 	.word	0x080040d8
 8001a04:	200000f8 	.word	0x200000f8
 8001a08:	200000fc 	.word	0x200000fc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff f8d6 	bl	8000bbc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e280      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4baf      	ldr	r3, [pc, #700]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x2a8>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f8c6 	bl	8000bbc <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff f8c2 	bl	8000bbc <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e26c      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4ba5      	ldr	r3, [pc, #660]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x2d0>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d060      	beq.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_OscConfig+0x310>
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d119      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d116      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a74:	4b99      	ldr	r3, [pc, #612]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_OscConfig+0x328>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e249      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8c:	4b93      	ldr	r3, [pc, #588]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	4990      	ldr	r1, [pc, #576]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa0:	e040      	b.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d023      	beq.n	8001af2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aaa:	4b8c      	ldr	r3, [pc, #560]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a8b      	ldr	r2, [pc, #556]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f881 	bl	8000bbc <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abe:	f7ff f87d 	bl	8000bbc <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e227      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad0:	4b82      	ldr	r3, [pc, #520]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001adc:	4b7f      	ldr	r3, [pc, #508]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	061b      	lsls	r3, r3, #24
 8001aea:	497c      	ldr	r1, [pc, #496]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
 8001af0:	e018      	b.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af2:	4b7a      	ldr	r3, [pc, #488]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a79      	ldr	r2, [pc, #484]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff f85d 	bl	8000bbc <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff f859 	bl	8000bbc <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e203      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b18:	4b70      	ldr	r3, [pc, #448]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d03c      	beq.n	8001baa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01c      	beq.n	8001b72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b38:	4b68      	ldr	r3, [pc, #416]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3e:	4a67      	ldr	r2, [pc, #412]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff f838 	bl	8000bbc <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff f834 	bl	8000bbc <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1de      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b62:	4b5e      	ldr	r3, [pc, #376]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0ef      	beq.n	8001b50 <HAL_RCC_OscConfig+0x3ec>
 8001b70:	e01b      	b.n	8001baa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b72:	4b5a      	ldr	r3, [pc, #360]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b78:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b82:	f7ff f81b 	bl	8000bbc <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8a:	f7ff f817 	bl	8000bbc <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e1c1      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b9c:	4b4f      	ldr	r3, [pc, #316]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1ef      	bne.n	8001b8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80a6 	beq.w	8001d04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bbc:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10d      	bne.n	8001be4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	4a43      	ldr	r2, [pc, #268]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd4:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be0:	2301      	movs	r3, #1
 8001be2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be4:	4b3e      	ldr	r3, [pc, #248]	; (8001ce0 <HAL_RCC_OscConfig+0x57c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d118      	bne.n	8001c22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <HAL_RCC_OscConfig+0x57c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a3a      	ldr	r2, [pc, #232]	; (8001ce0 <HAL_RCC_OscConfig+0x57c>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfc:	f7fe ffde 	bl	8000bbc <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c04:	f7fe ffda 	bl	8000bbc <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e184      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c16:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <HAL_RCC_OscConfig+0x57c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d108      	bne.n	8001c3c <HAL_RCC_OscConfig+0x4d8>
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c30:	4a2a      	ldr	r2, [pc, #168]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3a:	e024      	b.n	8001c86 <HAL_RCC_OscConfig+0x522>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b05      	cmp	r3, #5
 8001c42:	d110      	bne.n	8001c66 <HAL_RCC_OscConfig+0x502>
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4a:	4a24      	ldr	r2, [pc, #144]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c54:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	4a20      	ldr	r2, [pc, #128]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c64:	e00f      	b.n	8001c86 <HAL_RCC_OscConfig+0x522>
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7c:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001c7e:	f023 0304 	bic.w	r3, r3, #4
 8001c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d016      	beq.n	8001cbc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7fe ff95 	bl	8000bbc <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7fe ff91 	bl	8000bbc <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e139      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_OscConfig+0x578>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0ed      	beq.n	8001c96 <HAL_RCC_OscConfig+0x532>
 8001cba:	e01a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7fe ff7e 	bl	8000bbc <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc2:	e00f      	b.n	8001ce4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7fe ff7a 	bl	8000bbc <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d906      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e122      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ce4:	4b90      	ldr	r3, [pc, #576]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1e8      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cf2:	7ffb      	ldrb	r3, [r7, #31]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d105      	bne.n	8001d04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf8:	4b8b      	ldr	r3, [pc, #556]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	4a8a      	ldr	r2, [pc, #552]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d02:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8108 	beq.w	8001f1e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	f040 80d0 	bne.w	8001eb8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d18:	4b83      	ldr	r3, [pc, #524]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d130      	bne.n	8001d8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	3b01      	subs	r3, #1
 8001d38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d127      	bne.n	8001d8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d11f      	bne.n	8001d8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d58:	2a07      	cmp	r2, #7
 8001d5a:	bf14      	ite	ne
 8001d5c:	2201      	movne	r2, #1
 8001d5e:	2200      	moveq	r2, #0
 8001d60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d113      	bne.n	8001d8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d70:	085b      	lsrs	r3, r3, #1
 8001d72:	3b01      	subs	r3, #1
 8001d74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	3b01      	subs	r3, #1
 8001d88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d06e      	beq.n	8001e6c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	d069      	beq.n	8001e68 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d94:	4b64      	ldr	r3, [pc, #400]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001da0:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0b7      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001db0:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a5c      	ldr	r2, [pc, #368]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dbc:	f7fe fefe 	bl	8000bbc <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7fe fefa 	bl	8000bbc <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0a4      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd6:	4b54      	ldr	r3, [pc, #336]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de2:	4b51      	ldr	r3, [pc, #324]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <HAL_RCC_OscConfig+0x7c8>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001df2:	3a01      	subs	r2, #1
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	4311      	orrs	r1, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dfc:	0212      	lsls	r2, r2, #8
 8001dfe:	4311      	orrs	r1, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e04:	0852      	lsrs	r2, r2, #1
 8001e06:	3a01      	subs	r2, #1
 8001e08:	0552      	lsls	r2, r2, #21
 8001e0a:	4311      	orrs	r1, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e10:	0852      	lsrs	r2, r2, #1
 8001e12:	3a01      	subs	r2, #1
 8001e14:	0652      	lsls	r2, r2, #25
 8001e16:	4311      	orrs	r1, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e1c:	0912      	lsrs	r2, r2, #4
 8001e1e:	0452      	lsls	r2, r2, #17
 8001e20:	430a      	orrs	r2, r1
 8001e22:	4941      	ldr	r1, [pc, #260]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e28:	4b3f      	ldr	r3, [pc, #252]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a3e      	ldr	r2, [pc, #248]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e34:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e40:	f7fe febc 	bl	8000bbc <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7fe feb8 	bl	8000bbc <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e062      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5a:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e66:	e05a      	b.n	8001f1e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e059      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d152      	bne.n	8001f1e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e78:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e90:	f7fe fe94 	bl	8000bbc <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe fe90 	bl	8000bbc <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e03a      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x734>
 8001eb6:	e032      	b.n	8001f1e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	d02d      	beq.n	8001f1a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001edc:	f023 0303 	bic.w	r3, r3, #3
 8001ee0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001ee8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7fe fe63 	bl	8000bbc <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7fe fe5f 	bl	8000bbc <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e009      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_OscConfig+0x7c4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x796>
 8001f18:	e001      	b.n	8001f1e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	f99d808c 	.word	0xf99d808c

08001f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0c8      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d910      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 0207 	bic.w	r2, r3, #7
 8001f5a:	4961      	ldr	r1, [pc, #388]	; (80020e0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b5f      	ldr	r3, [pc, #380]	; (80020e0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0b0      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d04c      	beq.n	800201a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f88:	4b56      	ldr	r3, [pc, #344]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d121      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e09e      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa0:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d115      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e092      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb8:	4b4a      	ldr	r3, [pc, #296]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d109      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e086      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc8:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e07e      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fd8:	4b42      	ldr	r3, [pc, #264]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 0203 	bic.w	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	493f      	ldr	r1, [pc, #252]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fea:	f7fe fde7 	bl	8000bbc <HAL_GetTick>
 8001fee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff2:	f7fe fde3 	bl	8000bbc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e066      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 020c 	and.w	r2, r3, #12
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	429a      	cmp	r2, r3
 8002018:	d1eb      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	492c      	ldr	r1, [pc, #176]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_RCC_ClockConfig+0x1b0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d210      	bcs.n	8002068 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4924      	ldr	r1, [pc, #144]	; (80020e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e036      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4918      	ldr	r1, [pc, #96]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4910      	ldr	r1, [pc, #64]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020a6:	f000 f825 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_RCC_ClockConfig+0x1b4>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	490c      	ldr	r1, [pc, #48]	; (80020e8 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	5ccb      	ldrb	r3, [r1, r3]
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	fa22 f303 	lsr.w	r3, r2, r3
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fd26 	bl	8000b1c <HAL_InitTick>
 80020d0:	4603      	mov	r3, r0
 80020d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80020d4:	7afb      	ldrb	r3, [r7, #11]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40022000 	.word	0x40022000
 80020e4:	40021000 	.word	0x40021000
 80020e8:	080040d8 	.word	0x080040d8
 80020ec:	200000f8 	.word	0x200000f8
 80020f0:	200000fc 	.word	0x200000fc

080020f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002102:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800210c:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x34>
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d121      	bne.n	8002166 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d11e      	bne.n	8002166 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002128:	4b34      	ldr	r3, [pc, #208]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d107      	bne.n	8002144 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002134:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	e005      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002144:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002150:	4a2b      	ldr	r2, [pc, #172]	; (8002200 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002158:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10d      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002164:	e00a      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d102      	bne.n	8002172 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800216c:	4b25      	ldr	r3, [pc, #148]	; (8002204 <HAL_RCC_GetSysClockFreq+0x110>)
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	e004      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d101      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_RCC_GetSysClockFreq+0x114>)
 800217a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b0c      	cmp	r3, #12
 8002180:	d134      	bne.n	80021ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002182:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d003      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0xa6>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d003      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0xac>
 8002198:	e005      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_RCC_GetSysClockFreq+0x110>)
 800219c:	617b      	str	r3, [r7, #20]
      break;
 800219e:	e005      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_RCC_GetSysClockFreq+0x114>)
 80021a2:	617b      	str	r3, [r7, #20]
      break;
 80021a4:	e002      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	617b      	str	r3, [r7, #20]
      break;
 80021aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	3301      	adds	r3, #1
 80021b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	fb02 f203 	mul.w	r2, r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	0e5b      	lsrs	r3, r3, #25
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	3301      	adds	r3, #1
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021ec:	69bb      	ldr	r3, [r7, #24]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	080040f0 	.word	0x080040f0
 8002204:	00f42400 	.word	0x00f42400
 8002208:	007a1200 	.word	0x007a1200

0800220c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_RCC_GetHCLKFreq+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	200000f8 	.word	0x200000f8

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002228:	f7ff fff0 	bl	800220c <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4904      	ldr	r1, [pc, #16]	; (800224c <HAL_RCC_GetPCLK1Freq+0x28>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	080040e8 	.word	0x080040e8

08002250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002254:	f7ff ffda 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002258:	4602      	mov	r2, r0
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x24>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	0adb      	lsrs	r3, r3, #11
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	4904      	ldr	r1, [pc, #16]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	080040e8 	.word	0x080040e8

0800227c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002294:	f7ff fa02 	bl	800169c <HAL_PWREx_GetVoltageRange>
 8002298:	6178      	str	r0, [r7, #20]
 800229a:	e014      	b.n	80022c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	4a24      	ldr	r2, [pc, #144]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a6:	6593      	str	r3, [r2, #88]	; 0x58
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022b4:	f7ff f9f2 	bl	800169c <HAL_PWREx_GetVoltageRange>
 80022b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022cc:	d10b      	bne.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d919      	bls.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2ba0      	cmp	r3, #160	; 0xa0
 80022d8:	d902      	bls.n	80022e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022da:	2302      	movs	r3, #2
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	e013      	b.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e0:	2301      	movs	r3, #1
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	e010      	b.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d902      	bls.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022ec:	2303      	movs	r3, #3
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	e00a      	b.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	d102      	bne.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022f8:	2302      	movs	r3, #2
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	e004      	b.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b70      	cmp	r3, #112	; 0x70
 8002302:	d101      	bne.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002304:	2301      	movs	r3, #1
 8002306:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 0207 	bic.w	r2, r3, #7
 8002310:	4909      	ldr	r1, [pc, #36]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	429a      	cmp	r2, r3
 8002324:	d001      	beq.n	800232a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	40022000 	.word	0x40022000

0800233c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002344:	2300      	movs	r3, #0
 8002346:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002348:	2300      	movs	r3, #0
 800234a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002354:	2b00      	cmp	r3, #0
 8002356:	d041      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800235c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002360:	d02a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002362:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002366:	d824      	bhi.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002368:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800236c:	d008      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800236e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002372:	d81e      	bhi.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237c:	d010      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800237e:	e018      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002380:	4b86      	ldr	r3, [pc, #536]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a85      	ldr	r2, [pc, #532]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800238c:	e015      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fabb 	bl	8002910 <RCCEx_PLLSAI1_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800239e:	e00c      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3320      	adds	r3, #32
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fba6 	bl	8002af8 <RCCEx_PLLSAI2_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b0:	e003      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	74fb      	strb	r3, [r7, #19]
      break;
 80023b6:	e000      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023c0:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ce:	4973      	ldr	r1, [pc, #460]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023d6:	e001      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d041      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023f0:	d02a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023f6:	d824      	bhi.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023fc:	d008      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002402:	d81e      	bhi.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800240c:	d010      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800240e:	e018      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002410:	4b62      	ldr	r3, [pc, #392]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a61      	ldr	r2, [pc, #388]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800241c:	e015      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fa73 	bl	8002910 <RCCEx_PLLSAI1_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800242e:	e00c      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3320      	adds	r3, #32
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fb5e 	bl	8002af8 <RCCEx_PLLSAI2_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002440:	e003      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	74fb      	strb	r3, [r7, #19]
      break;
 8002446:	e000      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10b      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002450:	4b52      	ldr	r3, [pc, #328]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800245e:	494f      	ldr	r1, [pc, #316]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002466:	e001      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a0 	beq.w	80025ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800248e:	2300      	movs	r3, #0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	4a40      	ldr	r2, [pc, #256]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249e:	6593      	str	r3, [r2, #88]	; 0x58
 80024a0:	4b3e      	ldr	r3, [pc, #248]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ac:	2301      	movs	r3, #1
 80024ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a3a      	ldr	r2, [pc, #232]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024bc:	f7fe fb7e 	bl	8000bbc <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024c2:	e009      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c4:	f7fe fb7a 	bl	8000bbc <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d902      	bls.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	74fb      	strb	r3, [r7, #19]
        break;
 80024d6:	e005      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ef      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d15c      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ea:	4b2c      	ldr	r3, [pc, #176]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01f      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	429a      	cmp	r2, r3
 8002506:	d019      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002512:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	4a20      	ldr	r2, [pc, #128]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002524:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	4a1c      	ldr	r2, [pc, #112]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe fb39 	bl	8000bbc <HAL_GetTick>
 800254a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254c:	e00b      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7fe fb35 	bl	8000bbc <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d902      	bls.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	74fb      	strb	r3, [r7, #19]
            break;
 8002564:	e006      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ec      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10c      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258a:	4904      	ldr	r1, [pc, #16]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002592:	e009      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	74bb      	strb	r3, [r7, #18]
 8002598:	e006      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a8:	7c7b      	ldrb	r3, [r7, #17]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d105      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ae:	4b9e      	ldr	r3, [pc, #632]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	4a9d      	ldr	r2, [pc, #628]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025c6:	4b98      	ldr	r3, [pc, #608]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	f023 0203 	bic.w	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	4994      	ldr	r1, [pc, #592]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025e8:	4b8f      	ldr	r3, [pc, #572]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	f023 020c 	bic.w	r2, r3, #12
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	498c      	ldr	r1, [pc, #560]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800260a:	4b87      	ldr	r3, [pc, #540]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002610:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	4983      	ldr	r1, [pc, #524]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800262c:	4b7e      	ldr	r3, [pc, #504]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	497b      	ldr	r1, [pc, #492]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800264e:	4b76      	ldr	r3, [pc, #472]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265c:	4972      	ldr	r1, [pc, #456]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002670:	4b6d      	ldr	r3, [pc, #436]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	496a      	ldr	r1, [pc, #424]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002692:	4b65      	ldr	r3, [pc, #404]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002698:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	4961      	ldr	r1, [pc, #388]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026b4:	4b5c      	ldr	r3, [pc, #368]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c2:	4959      	ldr	r1, [pc, #356]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026d6:	4b54      	ldr	r3, [pc, #336]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e4:	4950      	ldr	r1, [pc, #320]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026f8:	4b4b      	ldr	r3, [pc, #300]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	4948      	ldr	r1, [pc, #288]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800271a:	4b43      	ldr	r3, [pc, #268]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	493f      	ldr	r1, [pc, #252]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d028      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800273c:	4b3a      	ldr	r3, [pc, #232]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274a:	4937      	ldr	r1, [pc, #220]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800275a:	d106      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800275c:	4b32      	ldr	r3, [pc, #200]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a31      	ldr	r2, [pc, #196]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002766:	60d3      	str	r3, [r2, #12]
 8002768:	e011      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800276e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002772:	d10c      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	2101      	movs	r1, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f8c8 	bl	8002910 <RCCEx_PLLSAI1_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d028      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800279a:	4b23      	ldr	r3, [pc, #140]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	491f      	ldr	r1, [pc, #124]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027b8:	d106      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	4a1a      	ldr	r2, [pc, #104]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c4:	60d3      	str	r3, [r2, #12]
 80027c6:	e011      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027d0:	d10c      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2101      	movs	r1, #1
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 f899 	bl	8002910 <RCCEx_PLLSAI1_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d02b      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002816:	d109      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a02      	ldr	r2, [pc, #8]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002822:	60d3      	str	r3, [r2, #12]
 8002824:	e014      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002830:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002834:	d10c      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	2101      	movs	r1, #1
 800283c:	4618      	mov	r0, r3
 800283e:	f000 f867 	bl	8002910 <RCCEx_PLLSAI1_Config>
 8002842:	4603      	mov	r3, r0
 8002844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800284c:	7cfb      	ldrb	r3, [r7, #19]
 800284e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d02f      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800286a:	4928      	ldr	r1, [pc, #160]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002876:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800287a:	d10d      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	2102      	movs	r1, #2
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f844 	bl	8002910 <RCCEx_PLLSAI1_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d014      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	74bb      	strb	r3, [r7, #18]
 8002896:	e011      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800289c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a0:	d10c      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3320      	adds	r3, #32
 80028a6:	2102      	movs	r1, #2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 f925 	bl	8002af8 <RCCEx_PLLSAI2_Config>
 80028ae:	4603      	mov	r3, r0
 80028b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028d6:	490d      	ldr	r1, [pc, #52]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028fa:	4904      	ldr	r1, [pc, #16]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002902:	7cbb      	ldrb	r3, [r7, #18]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000

08002910 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800291e:	4b75      	ldr	r3, [pc, #468]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d018      	beq.n	800295c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800292a:	4b72      	ldr	r3, [pc, #456]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0203 	and.w	r2, r3, #3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d10d      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
       ||
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002942:	4b6c      	ldr	r3, [pc, #432]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
       ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d047      	beq.n	80029e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	e044      	b.n	80029e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d018      	beq.n	8002996 <RCCEx_PLLSAI1_Config+0x86>
 8002964:	2b03      	cmp	r3, #3
 8002966:	d825      	bhi.n	80029b4 <RCCEx_PLLSAI1_Config+0xa4>
 8002968:	2b01      	cmp	r3, #1
 800296a:	d002      	beq.n	8002972 <RCCEx_PLLSAI1_Config+0x62>
 800296c:	2b02      	cmp	r3, #2
 800296e:	d009      	beq.n	8002984 <RCCEx_PLLSAI1_Config+0x74>
 8002970:	e020      	b.n	80029b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002972:	4b60      	ldr	r3, [pc, #384]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d11d      	bne.n	80029ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002982:	e01a      	b.n	80029ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002984:	4b5b      	ldr	r3, [pc, #364]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d116      	bne.n	80029be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002994:	e013      	b.n	80029be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002996:	4b57      	ldr	r3, [pc, #348]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029a2:	4b54      	ldr	r3, [pc, #336]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029b2:	e006      	b.n	80029c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      break;
 80029b8:	e004      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ba:	bf00      	nop
 80029bc:	e002      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029be:	bf00      	nop
 80029c0:	e000      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10d      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ca:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	430b      	orrs	r3, r1
 80029e0:	4944      	ldr	r1, [pc, #272]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d17d      	bne.n	8002ae8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029ec:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a40      	ldr	r2, [pc, #256]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f8:	f7fe f8e0 	bl	8000bbc <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029fe:	e009      	b.n	8002a14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a00:	f7fe f8dc 	bl	8000bbc <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d902      	bls.n	8002a14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	73fb      	strb	r3, [r7, #15]
        break;
 8002a12:	e005      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a14:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ef      	bne.n	8002a00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d160      	bne.n	8002ae8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d111      	bne.n	8002a50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a2c:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6892      	ldr	r2, [r2, #8]
 8002a3c:	0211      	lsls	r1, r2, #8
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68d2      	ldr	r2, [r2, #12]
 8002a42:	0912      	lsrs	r2, r2, #4
 8002a44:	0452      	lsls	r2, r2, #17
 8002a46:	430a      	orrs	r2, r1
 8002a48:	492a      	ldr	r1, [pc, #168]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	610b      	str	r3, [r1, #16]
 8002a4e:	e027      	b.n	8002aa0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d112      	bne.n	8002a7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a56:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6892      	ldr	r2, [r2, #8]
 8002a66:	0211      	lsls	r1, r2, #8
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6912      	ldr	r2, [r2, #16]
 8002a6c:	0852      	lsrs	r2, r2, #1
 8002a6e:	3a01      	subs	r2, #1
 8002a70:	0552      	lsls	r2, r2, #21
 8002a72:	430a      	orrs	r2, r1
 8002a74:	491f      	ldr	r1, [pc, #124]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	610b      	str	r3, [r1, #16]
 8002a7a:	e011      	b.n	8002aa0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6892      	ldr	r2, [r2, #8]
 8002a8c:	0211      	lsls	r1, r2, #8
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6952      	ldr	r2, [r2, #20]
 8002a92:	0852      	lsrs	r2, r2, #1
 8002a94:	3a01      	subs	r2, #1
 8002a96:	0652      	lsls	r2, r2, #25
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	4916      	ldr	r1, [pc, #88]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7fe f886 	bl	8000bbc <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ab2:	e009      	b.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ab4:	f7fe f882 	bl	8000bbc <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d902      	bls.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ac6:	e005      	b.n	8002ad4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ef      	beq.n	8002ab4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	4904      	ldr	r1, [pc, #16]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000

08002af8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b06:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d018      	beq.n	8002b44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b12:	4b67      	ldr	r3, [pc, #412]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0203 	and.w	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d10d      	bne.n	8002b3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
       ||
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b2a:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
       ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d047      	beq.n	8002bce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	e044      	b.n	8002bce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d018      	beq.n	8002b7e <RCCEx_PLLSAI2_Config+0x86>
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d825      	bhi.n	8002b9c <RCCEx_PLLSAI2_Config+0xa4>
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d002      	beq.n	8002b5a <RCCEx_PLLSAI2_Config+0x62>
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d009      	beq.n	8002b6c <RCCEx_PLLSAI2_Config+0x74>
 8002b58:	e020      	b.n	8002b9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b5a:	4b55      	ldr	r3, [pc, #340]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d11d      	bne.n	8002ba2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6a:	e01a      	b.n	8002ba2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b6c:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d116      	bne.n	8002ba6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7c:	e013      	b.n	8002ba6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b7e:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10f      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b8a:	4b49      	ldr	r3, [pc, #292]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b9a:	e006      	b.n	8002baa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba0:	e004      	b.n	8002bac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e002      	b.n	8002bac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e000      	b.n	8002bac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002baa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	4939      	ldr	r1, [pc, #228]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d167      	bne.n	8002ca4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bd4:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a35      	ldr	r2, [pc, #212]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be0:	f7fd ffec 	bl	8000bbc <HAL_GetTick>
 8002be4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002be6:	e009      	b.n	8002bfc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002be8:	f7fd ffe8 	bl	8000bbc <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d902      	bls.n	8002bfc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bfa:	e005      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ef      	bne.n	8002be8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d14a      	bne.n	8002ca4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d111      	bne.n	8002c38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c14:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6892      	ldr	r2, [r2, #8]
 8002c24:	0211      	lsls	r1, r2, #8
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68d2      	ldr	r2, [r2, #12]
 8002c2a:	0912      	lsrs	r2, r2, #4
 8002c2c:	0452      	lsls	r2, r2, #17
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	491f      	ldr	r1, [pc, #124]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	614b      	str	r3, [r1, #20]
 8002c36:	e011      	b.n	8002c5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6892      	ldr	r2, [r2, #8]
 8002c48:	0211      	lsls	r1, r2, #8
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6912      	ldr	r2, [r2, #16]
 8002c4e:	0852      	lsrs	r2, r2, #1
 8002c50:	3a01      	subs	r2, #1
 8002c52:	0652      	lsls	r2, r2, #25
 8002c54:	430a      	orrs	r2, r1
 8002c56:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fd ffa8 	bl	8000bbc <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c6e:	e009      	b.n	8002c84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c70:	f7fd ffa4 	bl	8000bbc <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d902      	bls.n	8002c84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	73fb      	strb	r3, [r7, #15]
          break;
 8002c82:	e005      	b.n	8002c90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ef      	beq.n	8002c70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4904      	ldr	r1, [pc, #16]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e040      	b.n	8002d48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd fdee 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	; 0x24
 8002ce0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fb46 	bl	8003384 <UART_SetConfig>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e022      	b.n	8002d48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fdc4 	bl	8003898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fe4b 	bl	80039dc <UART_CheckIdleState>
 8002d46:	4603      	mov	r3, r0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	f040 8082 	bne.w	8002e6e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <HAL_UART_Transmit+0x26>
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07a      	b.n	8002e70 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_UART_Transmit+0x38>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e073      	b.n	8002e70 <HAL_UART_Transmit+0x120>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2221      	movs	r2, #33	; 0x21
 8002d9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d9e:	f7fd ff0d 	bl	8000bbc <HAL_GetTick>
 8002da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	88fa      	ldrh	r2, [r7, #6]
 8002da8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	88fa      	ldrh	r2, [r7, #6]
 8002db0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbc:	d108      	bne.n	8002dd0 <HAL_UART_Transmit+0x80>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d104      	bne.n	8002dd0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	e003      	b.n	8002dd8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002de0:	e02d      	b.n	8002e3e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fe3e 	bl	8003a6e <UART_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e039      	b.n	8002e70 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10b      	bne.n	8002e1a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	881a      	ldrh	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e0e:	b292      	uxth	r2, r2
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	3302      	adds	r3, #2
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	e008      	b.n	8002e2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	781a      	ldrb	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	b292      	uxth	r2, r2
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1cb      	bne.n	8002de2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	2140      	movs	r1, #64	; 0x40
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fe0a 	bl	8003a6e <UART_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e005      	b.n	8002e70 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	4613      	mov	r3, r2
 8002e84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d145      	bne.n	8002f1a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_UART_Transmit_IT+0x22>
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e03e      	b.n	8002f1c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_UART_Transmit_IT+0x34>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e037      	b.n	8002f1c <HAL_UART_Transmit_IT+0xa4>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	88fa      	ldrh	r2, [r7, #6]
 8002ec6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2221      	movs	r2, #33	; 0x21
 8002edc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee6:	d107      	bne.n	8002ef8 <HAL_UART_Transmit_IT+0x80>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d103      	bne.n	8002ef8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <HAL_UART_Transmit_IT+0xb0>)
 8002ef4:	669a      	str	r2, [r3, #104]	; 0x68
 8002ef6:	e002      	b.n	8002efe <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <HAL_UART_Transmit_IT+0xb4>)
 8002efc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	08003eb5 	.word	0x08003eb5
 8002f2c:	08003e41 	.word	0x08003e41

08002f30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d113      	bne.n	8002f88 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00e      	beq.n	8002f88 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d009      	beq.n	8002f88 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 81ce 	beq.w	800331a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
      }
      return;
 8002f86:	e1c8      	b.n	800331a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80e3 	beq.w	8003156 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4ba6      	ldr	r3, [pc, #664]	; (8003238 <HAL_UART_IRQHandler+0x308>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80d8 	beq.w	8003156 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <HAL_UART_IRQHandler+0xa2>
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc8:	f043 0201 	orr.w	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d010      	beq.n	8002ffe <HAL_UART_IRQHandler+0xce>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2202      	movs	r2, #2
 8002fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff4:	f043 0204 	orr.w	r2, r3, #4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d010      	beq.n	800302a <HAL_UART_IRQHandler+0xfa>
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2204      	movs	r2, #4
 8003018:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003020:	f043 0202 	orr.w	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d104      	bne.n	8003048 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2208      	movs	r2, #8
 800304e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003056:	f043 0208 	orr.w	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003066:	2b00      	cmp	r3, #0
 8003068:	d011      	beq.n	800308e <HAL_UART_IRQHandler+0x15e>
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00c      	beq.n	800308e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800307c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8142 	beq.w	800331e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00c      	beq.n	80030be <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d004      	beq.n	80030de <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d031      	beq.n	8003142 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fdc3 	bl	8003c6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b40      	cmp	r3, #64	; 0x40
 80030f0:	d123      	bne.n	800313a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003100:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	2b00      	cmp	r3, #0
 8003108:	d013      	beq.n	8003132 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a4b      	ldr	r2, [pc, #300]	; (800323c <HAL_UART_IRQHandler+0x30c>)
 8003110:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	4618      	mov	r0, r3
 8003118:	f7fd ffc4 	bl	80010a4 <HAL_DMA_Abort_IT>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d017      	beq.n	8003152 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800312c:	4610      	mov	r0, r2
 800312e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003130:	e00f      	b.n	8003152 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f91c 	bl	8003370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003138:	e00b      	b.n	8003152 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f918 	bl	8003370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003140:	e007      	b.n	8003152 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f914 	bl	8003370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003150:	e0e5      	b.n	800331e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003152:	bf00      	nop
    return;
 8003154:	e0e3      	b.n	800331e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 80a9 	bne.w	80032b2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80a3 	beq.w	80032b2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 809d 	beq.w	80032b2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2210      	movs	r2, #16
 800317e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d158      	bne.n	8003240 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003198:	893b      	ldrh	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80c1 	beq.w	8003322 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031a6:	893a      	ldrh	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	f080 80ba 	bcs.w	8003322 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	893a      	ldrh	r2, [r7, #8]
 80031b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d12a      	bne.n	800321c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0201 	bic.w	r2, r2, #1
 80031e4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0210 	bic.w	r2, r2, #16
 8003210:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd ff06 	bl	8001028 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003228:	b29b      	uxth	r3, r3
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	b29b      	uxth	r3, r3
 800322e:	4619      	mov	r1, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fd f94f 	bl	80004d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003236:	e074      	b.n	8003322 <HAL_UART_IRQHandler+0x3f2>
 8003238:	04000120 	.word	0x04000120
 800323c:	08003e15 	.word	0x08003e15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800324c:	b29b      	uxth	r3, r3
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d063      	beq.n	8003326 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d060      	beq.n	8003326 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003272:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0210 	bic.w	r2, r2, #16
 80032a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032a6:	897b      	ldrh	r3, [r7, #10]
 80032a8:	4619      	mov	r1, r3
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fd f912 	bl	80004d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80032b0:	e039      	b.n	8003326 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <HAL_UART_IRQHandler+0x3a8>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fe46 	bl	8003f62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032d6:	e029      	b.n	800332c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01a      	beq.n	800332a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
    }
    return;
 80032fc:	e015      	b.n	800332a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d011      	beq.n	800332c <HAL_UART_IRQHandler+0x3fc>
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00c      	beq.n	800332c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fe0c 	bl	8003f30 <UART_EndTransmit_IT>
    return;
 8003318:	e008      	b.n	800332c <HAL_UART_IRQHandler+0x3fc>
      return;
 800331a:	bf00      	nop
 800331c:	e006      	b.n	800332c <HAL_UART_IRQHandler+0x3fc>
    return;
 800331e:	bf00      	nop
 8003320:	e004      	b.n	800332c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003322:	bf00      	nop
 8003324:	e002      	b.n	800332c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003326:	bf00      	nop
 8003328:	e000      	b.n	800332c <HAL_UART_IRQHandler+0x3fc>
    return;
 800332a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop

08003334 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003384:	b5b0      	push	{r4, r5, r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4bad      	ldr	r3, [pc, #692]	; (8003664 <UART_SetConfig+0x2e0>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	69f9      	ldr	r1, [r7, #28]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4aa2      	ldr	r2, [pc, #648]	; (8003668 <UART_SetConfig+0x2e4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a99      	ldr	r2, [pc, #612]	; (800366c <UART_SetConfig+0x2e8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d121      	bne.n	800344e <UART_SetConfig+0xca>
 800340a:	4b99      	ldr	r3, [pc, #612]	; (8003670 <UART_SetConfig+0x2ec>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b03      	cmp	r3, #3
 8003416:	d817      	bhi.n	8003448 <UART_SetConfig+0xc4>
 8003418:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <UART_SetConfig+0x9c>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	08003431 	.word	0x08003431
 8003424:	0800343d 	.word	0x0800343d
 8003428:	08003437 	.word	0x08003437
 800342c:	08003443 	.word	0x08003443
 8003430:	2301      	movs	r3, #1
 8003432:	76fb      	strb	r3, [r7, #27]
 8003434:	e0e7      	b.n	8003606 <UART_SetConfig+0x282>
 8003436:	2302      	movs	r3, #2
 8003438:	76fb      	strb	r3, [r7, #27]
 800343a:	e0e4      	b.n	8003606 <UART_SetConfig+0x282>
 800343c:	2304      	movs	r3, #4
 800343e:	76fb      	strb	r3, [r7, #27]
 8003440:	e0e1      	b.n	8003606 <UART_SetConfig+0x282>
 8003442:	2308      	movs	r3, #8
 8003444:	76fb      	strb	r3, [r7, #27]
 8003446:	e0de      	b.n	8003606 <UART_SetConfig+0x282>
 8003448:	2310      	movs	r3, #16
 800344a:	76fb      	strb	r3, [r7, #27]
 800344c:	e0db      	b.n	8003606 <UART_SetConfig+0x282>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a88      	ldr	r2, [pc, #544]	; (8003674 <UART_SetConfig+0x2f0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d132      	bne.n	80034be <UART_SetConfig+0x13a>
 8003458:	4b85      	ldr	r3, [pc, #532]	; (8003670 <UART_SetConfig+0x2ec>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b0c      	cmp	r3, #12
 8003464:	d828      	bhi.n	80034b8 <UART_SetConfig+0x134>
 8003466:	a201      	add	r2, pc, #4	; (adr r2, 800346c <UART_SetConfig+0xe8>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	080034a1 	.word	0x080034a1
 8003470:	080034b9 	.word	0x080034b9
 8003474:	080034b9 	.word	0x080034b9
 8003478:	080034b9 	.word	0x080034b9
 800347c:	080034ad 	.word	0x080034ad
 8003480:	080034b9 	.word	0x080034b9
 8003484:	080034b9 	.word	0x080034b9
 8003488:	080034b9 	.word	0x080034b9
 800348c:	080034a7 	.word	0x080034a7
 8003490:	080034b9 	.word	0x080034b9
 8003494:	080034b9 	.word	0x080034b9
 8003498:	080034b9 	.word	0x080034b9
 800349c:	080034b3 	.word	0x080034b3
 80034a0:	2300      	movs	r3, #0
 80034a2:	76fb      	strb	r3, [r7, #27]
 80034a4:	e0af      	b.n	8003606 <UART_SetConfig+0x282>
 80034a6:	2302      	movs	r3, #2
 80034a8:	76fb      	strb	r3, [r7, #27]
 80034aa:	e0ac      	b.n	8003606 <UART_SetConfig+0x282>
 80034ac:	2304      	movs	r3, #4
 80034ae:	76fb      	strb	r3, [r7, #27]
 80034b0:	e0a9      	b.n	8003606 <UART_SetConfig+0x282>
 80034b2:	2308      	movs	r3, #8
 80034b4:	76fb      	strb	r3, [r7, #27]
 80034b6:	e0a6      	b.n	8003606 <UART_SetConfig+0x282>
 80034b8:	2310      	movs	r3, #16
 80034ba:	76fb      	strb	r3, [r7, #27]
 80034bc:	e0a3      	b.n	8003606 <UART_SetConfig+0x282>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a6d      	ldr	r2, [pc, #436]	; (8003678 <UART_SetConfig+0x2f4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d120      	bne.n	800350a <UART_SetConfig+0x186>
 80034c8:	4b69      	ldr	r3, [pc, #420]	; (8003670 <UART_SetConfig+0x2ec>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034d2:	2b30      	cmp	r3, #48	; 0x30
 80034d4:	d013      	beq.n	80034fe <UART_SetConfig+0x17a>
 80034d6:	2b30      	cmp	r3, #48	; 0x30
 80034d8:	d814      	bhi.n	8003504 <UART_SetConfig+0x180>
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d009      	beq.n	80034f2 <UART_SetConfig+0x16e>
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d810      	bhi.n	8003504 <UART_SetConfig+0x180>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <UART_SetConfig+0x168>
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d006      	beq.n	80034f8 <UART_SetConfig+0x174>
 80034ea:	e00b      	b.n	8003504 <UART_SetConfig+0x180>
 80034ec:	2300      	movs	r3, #0
 80034ee:	76fb      	strb	r3, [r7, #27]
 80034f0:	e089      	b.n	8003606 <UART_SetConfig+0x282>
 80034f2:	2302      	movs	r3, #2
 80034f4:	76fb      	strb	r3, [r7, #27]
 80034f6:	e086      	b.n	8003606 <UART_SetConfig+0x282>
 80034f8:	2304      	movs	r3, #4
 80034fa:	76fb      	strb	r3, [r7, #27]
 80034fc:	e083      	b.n	8003606 <UART_SetConfig+0x282>
 80034fe:	2308      	movs	r3, #8
 8003500:	76fb      	strb	r3, [r7, #27]
 8003502:	e080      	b.n	8003606 <UART_SetConfig+0x282>
 8003504:	2310      	movs	r3, #16
 8003506:	76fb      	strb	r3, [r7, #27]
 8003508:	e07d      	b.n	8003606 <UART_SetConfig+0x282>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5b      	ldr	r2, [pc, #364]	; (800367c <UART_SetConfig+0x2f8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d120      	bne.n	8003556 <UART_SetConfig+0x1d2>
 8003514:	4b56      	ldr	r3, [pc, #344]	; (8003670 <UART_SetConfig+0x2ec>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800351e:	2bc0      	cmp	r3, #192	; 0xc0
 8003520:	d013      	beq.n	800354a <UART_SetConfig+0x1c6>
 8003522:	2bc0      	cmp	r3, #192	; 0xc0
 8003524:	d814      	bhi.n	8003550 <UART_SetConfig+0x1cc>
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d009      	beq.n	800353e <UART_SetConfig+0x1ba>
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d810      	bhi.n	8003550 <UART_SetConfig+0x1cc>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <UART_SetConfig+0x1b4>
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d006      	beq.n	8003544 <UART_SetConfig+0x1c0>
 8003536:	e00b      	b.n	8003550 <UART_SetConfig+0x1cc>
 8003538:	2300      	movs	r3, #0
 800353a:	76fb      	strb	r3, [r7, #27]
 800353c:	e063      	b.n	8003606 <UART_SetConfig+0x282>
 800353e:	2302      	movs	r3, #2
 8003540:	76fb      	strb	r3, [r7, #27]
 8003542:	e060      	b.n	8003606 <UART_SetConfig+0x282>
 8003544:	2304      	movs	r3, #4
 8003546:	76fb      	strb	r3, [r7, #27]
 8003548:	e05d      	b.n	8003606 <UART_SetConfig+0x282>
 800354a:	2308      	movs	r3, #8
 800354c:	76fb      	strb	r3, [r7, #27]
 800354e:	e05a      	b.n	8003606 <UART_SetConfig+0x282>
 8003550:	2310      	movs	r3, #16
 8003552:	76fb      	strb	r3, [r7, #27]
 8003554:	e057      	b.n	8003606 <UART_SetConfig+0x282>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a49      	ldr	r2, [pc, #292]	; (8003680 <UART_SetConfig+0x2fc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d125      	bne.n	80035ac <UART_SetConfig+0x228>
 8003560:	4b43      	ldr	r3, [pc, #268]	; (8003670 <UART_SetConfig+0x2ec>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356e:	d017      	beq.n	80035a0 <UART_SetConfig+0x21c>
 8003570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003574:	d817      	bhi.n	80035a6 <UART_SetConfig+0x222>
 8003576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357a:	d00b      	beq.n	8003594 <UART_SetConfig+0x210>
 800357c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003580:	d811      	bhi.n	80035a6 <UART_SetConfig+0x222>
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <UART_SetConfig+0x20a>
 8003586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358a:	d006      	beq.n	800359a <UART_SetConfig+0x216>
 800358c:	e00b      	b.n	80035a6 <UART_SetConfig+0x222>
 800358e:	2300      	movs	r3, #0
 8003590:	76fb      	strb	r3, [r7, #27]
 8003592:	e038      	b.n	8003606 <UART_SetConfig+0x282>
 8003594:	2302      	movs	r3, #2
 8003596:	76fb      	strb	r3, [r7, #27]
 8003598:	e035      	b.n	8003606 <UART_SetConfig+0x282>
 800359a:	2304      	movs	r3, #4
 800359c:	76fb      	strb	r3, [r7, #27]
 800359e:	e032      	b.n	8003606 <UART_SetConfig+0x282>
 80035a0:	2308      	movs	r3, #8
 80035a2:	76fb      	strb	r3, [r7, #27]
 80035a4:	e02f      	b.n	8003606 <UART_SetConfig+0x282>
 80035a6:	2310      	movs	r3, #16
 80035a8:	76fb      	strb	r3, [r7, #27]
 80035aa:	e02c      	b.n	8003606 <UART_SetConfig+0x282>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2d      	ldr	r2, [pc, #180]	; (8003668 <UART_SetConfig+0x2e4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d125      	bne.n	8003602 <UART_SetConfig+0x27e>
 80035b6:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <UART_SetConfig+0x2ec>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035c4:	d017      	beq.n	80035f6 <UART_SetConfig+0x272>
 80035c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ca:	d817      	bhi.n	80035fc <UART_SetConfig+0x278>
 80035cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d0:	d00b      	beq.n	80035ea <UART_SetConfig+0x266>
 80035d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d6:	d811      	bhi.n	80035fc <UART_SetConfig+0x278>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <UART_SetConfig+0x260>
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e0:	d006      	beq.n	80035f0 <UART_SetConfig+0x26c>
 80035e2:	e00b      	b.n	80035fc <UART_SetConfig+0x278>
 80035e4:	2300      	movs	r3, #0
 80035e6:	76fb      	strb	r3, [r7, #27]
 80035e8:	e00d      	b.n	8003606 <UART_SetConfig+0x282>
 80035ea:	2302      	movs	r3, #2
 80035ec:	76fb      	strb	r3, [r7, #27]
 80035ee:	e00a      	b.n	8003606 <UART_SetConfig+0x282>
 80035f0:	2304      	movs	r3, #4
 80035f2:	76fb      	strb	r3, [r7, #27]
 80035f4:	e007      	b.n	8003606 <UART_SetConfig+0x282>
 80035f6:	2308      	movs	r3, #8
 80035f8:	76fb      	strb	r3, [r7, #27]
 80035fa:	e004      	b.n	8003606 <UART_SetConfig+0x282>
 80035fc:	2310      	movs	r3, #16
 80035fe:	76fb      	strb	r3, [r7, #27]
 8003600:	e001      	b.n	8003606 <UART_SetConfig+0x282>
 8003602:	2310      	movs	r3, #16
 8003604:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <UART_SetConfig+0x2e4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	f040 8087 	bne.w	8003720 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003612:	7efb      	ldrb	r3, [r7, #27]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d837      	bhi.n	8003688 <UART_SetConfig+0x304>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <UART_SetConfig+0x29c>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003645 	.word	0x08003645
 8003624:	08003689 	.word	0x08003689
 8003628:	0800364d 	.word	0x0800364d
 800362c:	08003689 	.word	0x08003689
 8003630:	08003653 	.word	0x08003653
 8003634:	08003689 	.word	0x08003689
 8003638:	08003689 	.word	0x08003689
 800363c:	08003689 	.word	0x08003689
 8003640:	0800365b 	.word	0x0800365b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003644:	f7fe fdee 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8003648:	6178      	str	r0, [r7, #20]
        break;
 800364a:	e022      	b.n	8003692 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <UART_SetConfig+0x300>)
 800364e:	617b      	str	r3, [r7, #20]
        break;
 8003650:	e01f      	b.n	8003692 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003652:	f7fe fd4f 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 8003656:	6178      	str	r0, [r7, #20]
        break;
 8003658:	e01b      	b.n	8003692 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800365a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365e:	617b      	str	r3, [r7, #20]
        break;
 8003660:	e017      	b.n	8003692 <UART_SetConfig+0x30e>
 8003662:	bf00      	nop
 8003664:	efff69f3 	.word	0xefff69f3
 8003668:	40008000 	.word	0x40008000
 800366c:	40013800 	.word	0x40013800
 8003670:	40021000 	.word	0x40021000
 8003674:	40004400 	.word	0x40004400
 8003678:	40004800 	.word	0x40004800
 800367c:	40004c00 	.word	0x40004c00
 8003680:	40005000 	.word	0x40005000
 8003684:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	76bb      	strb	r3, [r7, #26]
        break;
 8003690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80f1 	beq.w	800387c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d305      	bcc.n	80036b6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d902      	bls.n	80036bc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	76bb      	strb	r3, [r7, #26]
 80036ba:	e0df      	b.n	800387c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4618      	mov	r0, r3
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	020b      	lsls	r3, r1, #8
 80036ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036d2:	0202      	lsls	r2, r0, #8
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	6849      	ldr	r1, [r1, #4]
 80036d8:	0849      	lsrs	r1, r1, #1
 80036da:	4608      	mov	r0, r1
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	1814      	adds	r4, r2, r0
 80036e2:	eb43 0501 	adc.w	r5, r3, r1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	4620      	mov	r0, r4
 80036f2:	4629      	mov	r1, r5
 80036f4:	f7fc fd72 	bl	80001dc <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4613      	mov	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003706:	d308      	bcc.n	800371a <UART_SetConfig+0x396>
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370e:	d204      	bcs.n	800371a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	e0b0      	b.n	800387c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	76bb      	strb	r3, [r7, #26]
 800371e:	e0ad      	b.n	800387c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003728:	d15c      	bne.n	80037e4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800372a:	7efb      	ldrb	r3, [r7, #27]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d828      	bhi.n	8003782 <UART_SetConfig+0x3fe>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <UART_SetConfig+0x3b4>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	0800375d 	.word	0x0800375d
 800373c:	08003765 	.word	0x08003765
 8003740:	0800376d 	.word	0x0800376d
 8003744:	08003783 	.word	0x08003783
 8003748:	08003773 	.word	0x08003773
 800374c:	08003783 	.word	0x08003783
 8003750:	08003783 	.word	0x08003783
 8003754:	08003783 	.word	0x08003783
 8003758:	0800377b 	.word	0x0800377b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7fe fd62 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8003760:	6178      	str	r0, [r7, #20]
        break;
 8003762:	e013      	b.n	800378c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003764:	f7fe fd74 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8003768:	6178      	str	r0, [r7, #20]
        break;
 800376a:	e00f      	b.n	800378c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800376c:	4b49      	ldr	r3, [pc, #292]	; (8003894 <UART_SetConfig+0x510>)
 800376e:	617b      	str	r3, [r7, #20]
        break;
 8003770:	e00c      	b.n	800378c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003772:	f7fe fcbf 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 8003776:	6178      	str	r0, [r7, #20]
        break;
 8003778:	e008      	b.n	800378c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377e:	617b      	str	r3, [r7, #20]
        break;
 8003780:	e004      	b.n	800378c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	76bb      	strb	r3, [r7, #26]
        break;
 800378a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d074      	beq.n	800387c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	005a      	lsls	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d916      	bls.n	80037de <UART_SetConfig+0x45a>
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b6:	d212      	bcs.n	80037de <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f023 030f 	bic.w	r3, r3, #15
 80037c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	89fb      	ldrh	r3, [r7, #14]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	89fa      	ldrh	r2, [r7, #14]
 80037da:	60da      	str	r2, [r3, #12]
 80037dc:	e04e      	b.n	800387c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	76bb      	strb	r3, [r7, #26]
 80037e2:	e04b      	b.n	800387c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037e4:	7efb      	ldrb	r3, [r7, #27]
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d827      	bhi.n	800383a <UART_SetConfig+0x4b6>
 80037ea:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <UART_SetConfig+0x46c>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003815 	.word	0x08003815
 80037f4:	0800381d 	.word	0x0800381d
 80037f8:	08003825 	.word	0x08003825
 80037fc:	0800383b 	.word	0x0800383b
 8003800:	0800382b 	.word	0x0800382b
 8003804:	0800383b 	.word	0x0800383b
 8003808:	0800383b 	.word	0x0800383b
 800380c:	0800383b 	.word	0x0800383b
 8003810:	08003833 	.word	0x08003833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003814:	f7fe fd06 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8003818:	6178      	str	r0, [r7, #20]
        break;
 800381a:	e013      	b.n	8003844 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800381c:	f7fe fd18 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8003820:	6178      	str	r0, [r7, #20]
        break;
 8003822:	e00f      	b.n	8003844 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <UART_SetConfig+0x510>)
 8003826:	617b      	str	r3, [r7, #20]
        break;
 8003828:	e00c      	b.n	8003844 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800382a:	f7fe fc63 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 800382e:	6178      	str	r0, [r7, #20]
        break;
 8003830:	e008      	b.n	8003844 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003836:	617b      	str	r3, [r7, #20]
        break;
 8003838:	e004      	b.n	8003844 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	76bb      	strb	r3, [r7, #26]
        break;
 8003842:	bf00      	nop
    }

    if (pclk != 0U)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	085a      	lsrs	r2, r3, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	441a      	add	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	b29b      	uxth	r3, r3
 800385e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b0f      	cmp	r3, #15
 8003864:	d908      	bls.n	8003878 <UART_SetConfig+0x4f4>
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386c:	d204      	bcs.n	8003878 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	e001      	b.n	800387c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003888:	7ebb      	ldrb	r3, [r7, #26]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bdb0      	pop	{r4, r5, r7, pc}
 8003892:	bf00      	nop
 8003894:	00f42400 	.word	0x00f42400

08003898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01a      	beq.n	80039ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003996:	d10a      	bne.n	80039ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039ec:	f7fd f8e6 	bl	8000bbc <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d10e      	bne.n	8003a1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f82d 	bl	8003a6e <UART_WaitOnFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e023      	b.n	8003a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d10e      	bne.n	8003a4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f817 	bl	8003a6e <UART_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e00d      	b.n	8003a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7e:	e05e      	b.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a86:	d05a      	beq.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a88:	f7fd f898 	bl	8000bbc <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d302      	bcc.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d11b      	bne.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e043      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d02c      	beq.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af2:	d124      	bne.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003afc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b0c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e00f      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4013      	ands	r3, r2
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	bf0c      	ite	eq
 8003b4e:	2301      	moveq	r3, #1
 8003b50:	2300      	movne	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d091      	beq.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	4613      	mov	r3, r2
 8003b74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	88fa      	ldrh	r2, [r7, #6]
 8003b80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2222      	movs	r2, #34	; 0x22
 8003b90:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d02b      	beq.n	8003bf2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	4a25      	ldr	r2, [pc, #148]	; (8003c34 <UART_Start_Receive_DMA+0xcc>)
 8003ba0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	4a24      	ldr	r2, [pc, #144]	; (8003c38 <UART_Start_Receive_DMA+0xd0>)
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	4a23      	ldr	r2, [pc, #140]	; (8003c3c <UART_Start_Receive_DMA+0xd4>)
 8003bb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3324      	adds	r3, #36	; 0x24
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bca:	461a      	mov	r2, r3
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	f7fd f9cb 	bl	8000f68 <HAL_DMA_Start_IT>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00c      	beq.n	8003bf2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2210      	movs	r2, #16
 8003bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e01c      	b.n	8003c2c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c08:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c28:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	08003cc9 	.word	0x08003cc9
 8003c38:	08003d61 	.word	0x08003d61
 8003c3c:	08003d99 	.word	0x08003d99

08003c40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003c56:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c80:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0201 	bic.w	r2, r2, #1
 8003c90:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d107      	bne.n	8003caa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0210 	bic.w	r2, r2, #16
 8003ca8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d12a      	bne.n	8003d3a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cfa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d1a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0210 	bic.w	r2, r2, #16
 8003d38:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d107      	bne.n	8003d52 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d48:	4619      	mov	r1, r3
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7fc fbc2 	bl	80004d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d50:	e002      	b.n	8003d58 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff faf8 	bl	8003348 <HAL_UART_RxCpltCallback>
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d109      	bne.n	8003d8a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	4619      	mov	r1, r3
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f7fc fba6 	bl	80004d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d88:	e002      	b.n	8003d90 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff fae6 	bl	800335c <HAL_UART_RxHalfCpltCallback>
}
 8003d90:	bf00      	nop
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003daa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbc:	2b80      	cmp	r3, #128	; 0x80
 8003dbe:	d109      	bne.n	8003dd4 <UART_DMAError+0x3c>
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b21      	cmp	r3, #33	; 0x21
 8003dc4:	d106      	bne.n	8003dd4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003dce:	6978      	ldr	r0, [r7, #20]
 8003dd0:	f7ff ff36 	bl	8003c40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d109      	bne.n	8003df6 <UART_DMAError+0x5e>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b22      	cmp	r3, #34	; 0x22
 8003de6:	d106      	bne.n	8003df6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003df0:	6978      	ldr	r0, [r7, #20]
 8003df2:	f7ff ff3a 	bl	8003c6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfc:	f043 0210 	orr.w	r2, r3, #16
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e06:	6978      	ldr	r0, [r7, #20]
 8003e08:	f7ff fab2 	bl	8003370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e0c:	bf00      	nop
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff fa9c 	bl	8003370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e4c:	2b21      	cmp	r3, #33	; 0x21
 8003e4e:	d12b      	bne.n	8003ea8 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d110      	bne.n	8003e7e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e6a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e7a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003e7c:	e014      	b.n	8003ea8 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e82:	781a      	ldrb	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	b292      	uxth	r2, r2
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec0:	2b21      	cmp	r3, #33	; 0x21
 8003ec2:	d12f      	bne.n	8003f24 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d110      	bne.n	8003ef2 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ede:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eee:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003ef0:	e018      	b.n	8003f24 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef6:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	881a      	ldrh	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f04:	b292      	uxth	r2, r2
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0c:	1c9a      	adds	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f46:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff f9ed 	bl	8003334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b086      	sub	sp, #24
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	4613      	mov	r3, r2
 8003f82:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d135      	bne.n	8003ff8 <HAL_UARTEx_ReceiveToIdle_DMA+0x82>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e02e      	b.n	8003ffa <HAL_UARTEx_ReceiveToIdle_DMA+0x84>
    }

    __HAL_LOCK(huart);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e027      	b.n	8003ffa <HAL_UARTEx_ReceiveToIdle_DMA+0x84>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7ff fdd2 	bl	8003b68 <UART_Start_Receive_DMA>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d112      	bne.n	8003ff4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7a>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2210      	movs	r2, #16
 8003fdc:	621a      	str	r2, [r3, #32]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0210 	orr.w	r2, r2, #16
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e001      	b.n	8003ff4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	e000      	b.n	8003ffa <HAL_UARTEx_ReceiveToIdle_DMA+0x84>
  }
  else
  {
    return HAL_BUSY;
 8003ff8:	2302      	movs	r3, #2
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <__libc_init_array>:
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	4d0d      	ldr	r5, [pc, #52]	; (800403c <__libc_init_array+0x38>)
 8004008:	4c0d      	ldr	r4, [pc, #52]	; (8004040 <__libc_init_array+0x3c>)
 800400a:	1b64      	subs	r4, r4, r5
 800400c:	10a4      	asrs	r4, r4, #2
 800400e:	2600      	movs	r6, #0
 8004010:	42a6      	cmp	r6, r4
 8004012:	d109      	bne.n	8004028 <__libc_init_array+0x24>
 8004014:	4d0b      	ldr	r5, [pc, #44]	; (8004044 <__libc_init_array+0x40>)
 8004016:	4c0c      	ldr	r4, [pc, #48]	; (8004048 <__libc_init_array+0x44>)
 8004018:	f000 f820 	bl	800405c <_init>
 800401c:	1b64      	subs	r4, r4, r5
 800401e:	10a4      	asrs	r4, r4, #2
 8004020:	2600      	movs	r6, #0
 8004022:	42a6      	cmp	r6, r4
 8004024:	d105      	bne.n	8004032 <__libc_init_array+0x2e>
 8004026:	bd70      	pop	{r4, r5, r6, pc}
 8004028:	f855 3b04 	ldr.w	r3, [r5], #4
 800402c:	4798      	blx	r3
 800402e:	3601      	adds	r6, #1
 8004030:	e7ee      	b.n	8004010 <__libc_init_array+0xc>
 8004032:	f855 3b04 	ldr.w	r3, [r5], #4
 8004036:	4798      	blx	r3
 8004038:	3601      	adds	r6, #1
 800403a:	e7f2      	b.n	8004022 <__libc_init_array+0x1e>
 800403c:	08004128 	.word	0x08004128
 8004040:	08004128 	.word	0x08004128
 8004044:	08004128 	.word	0x08004128
 8004048:	0800412c 	.word	0x0800412c

0800404c <memset>:
 800404c:	4402      	add	r2, r0
 800404e:	4603      	mov	r3, r0
 8004050:	4293      	cmp	r3, r2
 8004052:	d100      	bne.n	8004056 <memset+0xa>
 8004054:	4770      	bx	lr
 8004056:	f803 1b01 	strb.w	r1, [r3], #1
 800405a:	e7f9      	b.n	8004050 <memset+0x4>

0800405c <_init>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	bf00      	nop
 8004060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004062:	bc08      	pop	{r3}
 8004064:	469e      	mov	lr, r3
 8004066:	4770      	bx	lr

08004068 <_fini>:
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406a:	bf00      	nop
 800406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406e:	bc08      	pop	{r3}
 8004070:	469e      	mov	lr, r3
 8004072:	4770      	bx	lr
